// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/openauth/v1/groups.proto

package openauth_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Group with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Group) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Group with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GroupMultiError, or nil if none found.
func (m *Group) ValidateAll() error {
	return m.validate(true)
}

func (m *Group) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for IsSystem

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GroupMultiError(errors)
	}

	return nil
}

// GroupMultiError is an error wrapping multiple validation errors returned by
// Group.ValidateAll() if the designated constraints aren't met.
type GroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMultiError) AllErrors() []error { return m }

// GroupValidationError is the validation error returned by Group.Validate if
// the designated constraints aren't met.
type GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupValidationError) ErrorName() string { return "GroupValidationError" }

// Error satisfies the builtin error interface
func (e GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupValidationError{}

// Validate checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupRequestMultiError, or nil if none found.
func (m *CreateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		err := CreateGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateGroupRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateGroupRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z][a-z0-9_-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDisplayName()); l < 3 || l > 100 {
		err := CreateGroupRequestValidationError{
			field:  "DisplayName",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsDefault

	if m.Description != nil {

		if utf8.RuneCountInString(m.GetDescription()) > 1000 {
			err := CreateGroupRequestValidationError{
				field:  "Description",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateGroupRequestMultiError(errors)
	}

	return nil
}

// CreateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupRequestMultiError) AllErrors() []error { return m }

// CreateGroupRequestValidationError is the validation error returned by
// CreateGroupRequest.Validate if the designated constraints aren't met.
type CreateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupRequestValidationError) ErrorName() string {
	return "CreateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupRequestValidationError{}

var _CreateGroupRequest_Name_Pattern = regexp.MustCompile("^[a-z][a-z0-9_-]*$")

// Validate checks the field values on CreateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupResponseMultiError, or nil if none found.
func (m *CreateGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateGroupResponseMultiError(errors)
	}

	return nil
}

// CreateGroupResponseMultiError is an error wrapping multiple validation
// errors returned by CreateGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupResponseMultiError) AllErrors() []error { return m }

// CreateGroupResponseValidationError is the validation error returned by
// CreateGroupResponse.Validate if the designated constraints aren't met.
type CreateGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupResponseValidationError) ErrorName() string {
	return "CreateGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupResponseValidationError{}

// Validate checks the field values on GetGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupRequestMultiError, or nil if none found.
func (m *GetGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetGroupRequestMultiError(errors)
	}

	return nil
}

// GetGroupRequestMultiError is an error wrapping multiple validation errors
// returned by GetGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupRequestMultiError) AllErrors() []error { return m }

// GetGroupRequestValidationError is the validation error returned by
// GetGroupRequest.Validate if the designated constraints aren't met.
type GetGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestValidationError) ErrorName() string { return "GetGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestValidationError{}

// Validate checks the field values on GetGroupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupResponseMultiError, or nil if none found.
func (m *GetGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupResponseMultiError(errors)
	}

	return nil
}

// GetGroupResponseMultiError is an error wrapping multiple validation errors
// returned by GetGroupResponse.ValidateAll() if the designated constraints
// aren't met.
type GetGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupResponseMultiError) AllErrors() []error { return m }

// GetGroupResponseValidationError is the validation error returned by
// GetGroupResponse.Validate if the designated constraints aren't met.
type GetGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupResponseValidationError) ErrorName() string { return "GetGroupResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupResponseValidationError{}

// Validate checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupRequestMultiError, or nil if none found.
func (m *UpdateGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
			err := UpdateGroupRequestValidationError{
				field:  "Name",
				reason: "value length must be between 3 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_UpdateGroupRequest_Name_Pattern.MatchString(m.GetName()) {
			err := UpdateGroupRequestValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^[a-z][a-z0-9_-]*$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DisplayName != nil {

		if l := utf8.RuneCountInString(m.GetDisplayName()); l < 3 || l > 100 {
			err := UpdateGroupRequestValidationError{
				field:  "DisplayName",
				reason: "value length must be between 3 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Description != nil {

		if utf8.RuneCountInString(m.GetDescription()) > 1000 {
			err := UpdateGroupRequestValidationError{
				field:  "Description",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupRequestMultiError) AllErrors() []error { return m }

// UpdateGroupRequestValidationError is the validation error returned by
// UpdateGroupRequest.Validate if the designated constraints aren't met.
type UpdateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupRequestValidationError) ErrorName() string {
	return "UpdateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupRequestValidationError{}

var _UpdateGroupRequest_Name_Pattern = regexp.MustCompile("^[a-z][a-z0-9_-]*$")

// Validate checks the field values on UpdateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupResponseMultiError, or nil if none found.
func (m *UpdateGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateGroupResponseMultiError(errors)
	}

	return nil
}

// UpdateGroupResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupResponseMultiError) AllErrors() []error { return m }

// UpdateGroupResponseValidationError is the validation error returned by
// UpdateGroupResponse.Validate if the designated constraints aren't met.
type UpdateGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupResponseValidationError) ErrorName() string {
	return "UpdateGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupResponseValidationError{}

// Validate checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupRequestMultiError, or nil if none found.
func (m *DeleteGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteGroupRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupRequestMultiError) AllErrors() []error { return m }

// DeleteGroupRequestValidationError is the validation error returned by
// DeleteGroupRequest.Validate if the designated constraints aren't met.
type DeleteGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupRequestValidationError) ErrorName() string {
	return "DeleteGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupRequestValidationError{}

// Validate checks the field values on DeleteGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupResponseMultiError, or nil if none found.
func (m *DeleteGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteGroupResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupResponseMultiError) AllErrors() []error { return m }

// DeleteGroupResponseValidationError is the validation error returned by
// DeleteGroupResponse.Validate if the designated constraints aren't met.
type DeleteGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupResponseValidationError) ErrorName() string {
	return "DeleteGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupResponseValidationError{}

// Validate checks the field values on ListGroupsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupsRequestMultiError, or nil if none found.
func (m *ListGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLimit(); val < 1 || val > 100 {
		err := ListGroupsRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := ListGroupsRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for All

	if m.Id != nil {

		if m.GetId() <= 0 {
			err := ListGroupsRequestValidationError{
				field:  "Id",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Search != nil {

		if utf8.RuneCountInString(m.GetSearch()) > 255 {
			err := ListGroupsRequestValidationError{
				field:  "Search",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListGroupsRequestMultiError(errors)
	}

	return nil
}

// ListGroupsRequestMultiError is an error wrapping multiple validation errors
// returned by ListGroupsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupsRequestMultiError) AllErrors() []error { return m }

// ListGroupsRequestValidationError is the validation error returned by
// ListGroupsRequest.Validate if the designated constraints aren't met.
type ListGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupsRequestValidationError) ErrorName() string {
	return "ListGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupsRequestValidationError{}

// Validate checks the field values on ListGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupsResponseMultiError, or nil if none found.
func (m *ListGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGroupsResponseMultiError(errors)
	}

	return nil
}

// ListGroupsResponseMultiError is an error wrapping multiple validation errors
// returned by ListGroupsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupsResponseMultiError) AllErrors() []error { return m }

// ListGroupsResponseValidationError is the validation error returned by
// ListGroupsResponse.Validate if the designated constraints aren't met.
type ListGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupsResponseValidationError) ErrorName() string {
	return "ListGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupsResponseValidationError{}

// Validate checks the field values on AssignUsersToGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignUsersToGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignUsersToGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignUsersToGroupRequestMultiError, or nil if none found.
func (m *AssignUsersToGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignUsersToGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetUserIds()); l < 1 || l > 100 {
		err := AssignUsersToGroupRequestValidationError{
			field:  "UserIds",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUserIds() {
		_, _ = idx, item

		if item <= 0 {
			err := AssignUsersToGroupRequestValidationError{
				field:  fmt.Sprintf("UserIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetGroupId() <= 0 {
		err := AssignUsersToGroupRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ExpiresAt != nil {

		if m.GetExpiresAt() < 0 {
			err := AssignUsersToGroupRequestValidationError{
				field:  "ExpiresAt",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AssignUsersToGroupRequestMultiError(errors)
	}

	return nil
}

// AssignUsersToGroupRequestMultiError is an error wrapping multiple validation
// errors returned by AssignUsersToGroupRequest.ValidateAll() if the
// designated constraints aren't met.
type AssignUsersToGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignUsersToGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignUsersToGroupRequestMultiError) AllErrors() []error { return m }

// AssignUsersToGroupRequestValidationError is the validation error returned by
// AssignUsersToGroupRequest.Validate if the designated constraints aren't met.
type AssignUsersToGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignUsersToGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignUsersToGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignUsersToGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignUsersToGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignUsersToGroupRequestValidationError) ErrorName() string {
	return "AssignUsersToGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignUsersToGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignUsersToGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignUsersToGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignUsersToGroupRequestValidationError{}

// Validate checks the field values on AssignUsersToGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignUsersToGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignUsersToGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignUsersToGroupResponseMultiError, or nil if none found.
func (m *AssignUsersToGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignUsersToGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return AssignUsersToGroupResponseMultiError(errors)
	}

	return nil
}

// AssignUsersToGroupResponseMultiError is an error wrapping multiple
// validation errors returned by AssignUsersToGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type AssignUsersToGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignUsersToGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignUsersToGroupResponseMultiError) AllErrors() []error { return m }

// AssignUsersToGroupResponseValidationError is the validation error returned
// by AssignUsersToGroupResponse.Validate if the designated constraints aren't met.
type AssignUsersToGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignUsersToGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignUsersToGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignUsersToGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignUsersToGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignUsersToGroupResponseValidationError) ErrorName() string {
	return "AssignUsersToGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignUsersToGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignUsersToGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignUsersToGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignUsersToGroupResponseValidationError{}

// Validate checks the field values on RemoveUsersFromGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveUsersFromGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUsersFromGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveUsersFromGroupRequestMultiError, or nil if none found.
func (m *RemoveUsersFromGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUsersFromGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetUserIds()); l < 1 || l > 100 {
		err := RemoveUsersFromGroupRequestValidationError{
			field:  "UserIds",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUserIds() {
		_, _ = idx, item

		if item <= 0 {
			err := RemoveUsersFromGroupRequestValidationError{
				field:  fmt.Sprintf("UserIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetGroupId() <= 0 {
		err := RemoveUsersFromGroupRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveUsersFromGroupRequestMultiError(errors)
	}

	return nil
}

// RemoveUsersFromGroupRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveUsersFromGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveUsersFromGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUsersFromGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUsersFromGroupRequestMultiError) AllErrors() []error { return m }

// RemoveUsersFromGroupRequestValidationError is the validation error returned
// by RemoveUsersFromGroupRequest.Validate if the designated constraints
// aren't met.
type RemoveUsersFromGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUsersFromGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUsersFromGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUsersFromGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUsersFromGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUsersFromGroupRequestValidationError) ErrorName() string {
	return "RemoveUsersFromGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUsersFromGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUsersFromGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUsersFromGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUsersFromGroupRequestValidationError{}

// Validate checks the field values on RemoveUsersFromGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveUsersFromGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUsersFromGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveUsersFromGroupResponseMultiError, or nil if none found.
func (m *RemoveUsersFromGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUsersFromGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return RemoveUsersFromGroupResponseMultiError(errors)
	}

	return nil
}

// RemoveUsersFromGroupResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveUsersFromGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveUsersFromGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUsersFromGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUsersFromGroupResponseMultiError) AllErrors() []error { return m }

// RemoveUsersFromGroupResponseValidationError is the validation error returned
// by RemoveUsersFromGroupResponse.Validate if the designated constraints
// aren't met.
type RemoveUsersFromGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUsersFromGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUsersFromGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUsersFromGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUsersFromGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUsersFromGroupResponseValidationError) ErrorName() string {
	return "RemoveUsersFromGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUsersFromGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUsersFromGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUsersFromGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUsersFromGroupResponseValidationError{}

// Validate checks the field values on ListGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupUsersRequestMultiError, or nil if none found.
func (m *ListGroupUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := ListGroupUsersRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val < 1 || val > 100 {
		err := ListGroupUsersRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := ListGroupUsersRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for All

	if len(errors) > 0 {
		return ListGroupUsersRequestMultiError(errors)
	}

	return nil
}

// ListGroupUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListGroupUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGroupUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupUsersRequestMultiError) AllErrors() []error { return m }

// ListGroupUsersRequestValidationError is the validation error returned by
// ListGroupUsersRequest.Validate if the designated constraints aren't met.
type ListGroupUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupUsersRequestValidationError) ErrorName() string {
	return "ListGroupUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupUsersRequestValidationError{}

// Validate checks the field values on ListGroupUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupUsersResponseMultiError, or nil if none found.
func (m *ListGroupUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGroupUsersResponseMultiError(errors)
	}

	return nil
}

// ListGroupUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ListGroupUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListGroupUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupUsersResponseMultiError) AllErrors() []error { return m }

// ListGroupUsersResponseValidationError is the validation error returned by
// ListGroupUsersResponse.Validate if the designated constraints aren't met.
type ListGroupUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupUsersResponseValidationError) ErrorName() string {
	return "ListGroupUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupUsersResponseValidationError{}

// Validate checks the field values on GroupUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupUserMultiError, or nil
// if none found.
func (m *GroupUser) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserUuid

	// no validation rules for Username

	// no validation rules for AssignedAt

	// no validation rules for AssignedBy

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.ExpiresAt != nil {
		// no validation rules for ExpiresAt
	}

	if len(errors) > 0 {
		return GroupUserMultiError(errors)
	}

	return nil
}

// GroupUserMultiError is an error wrapping multiple validation errors returned
// by GroupUser.ValidateAll() if the designated constraints aren't met.
type GroupUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupUserMultiError) AllErrors() []error { return m }

// GroupUserValidationError is the validation error returned by
// GroupUser.Validate if the designated constraints aren't met.
type GroupUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupUserValidationError) ErrorName() string { return "GroupUserValidationError" }

// Error satisfies the builtin error interface
func (e GroupUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupUserValidationError{}

// Validate checks the field values on ListUserGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserGroupsRequestMultiError, or nil if none found.
func (m *ListUserGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListUserGroupsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val < 1 || val > 100 {
		err := ListUserGroupsRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := ListUserGroupsRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for All

	if len(errors) > 0 {
		return ListUserGroupsRequestMultiError(errors)
	}

	return nil
}

// ListUserGroupsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupsRequestMultiError) AllErrors() []error { return m }

// ListUserGroupsRequestValidationError is the validation error returned by
// ListUserGroupsRequest.Validate if the designated constraints aren't met.
type ListUserGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupsRequestValidationError) ErrorName() string {
	return "ListUserGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupsRequestValidationError{}

// Validate checks the field values on ListUserGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserGroupsResponseMultiError, or nil if none found.
func (m *ListUserGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserGroupsResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserGroupsResponseMultiError(errors)
	}

	return nil
}

// ListUserGroupsResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupsResponseMultiError) AllErrors() []error { return m }

// ListUserGroupsResponseValidationError is the validation error returned by
// ListUserGroupsResponse.Validate if the designated constraints aren't met.
type ListUserGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupsResponseValidationError) ErrorName() string {
	return "ListUserGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupsResponseValidationError{}

// Validate checks the field values on UserGroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGroupMultiError, or nil
// if none found.
func (m *UserGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for GroupName

	// no validation rules for GroupDisplayName

	// no validation rules for IsSystem

	// no validation rules for IsDefault

	// no validation rules for AssignedAt

	// no validation rules for AssignedBy

	if m.GroupDescription != nil {
		// no validation rules for GroupDescription
	}

	if m.ExpiresAt != nil {
		// no validation rules for ExpiresAt
	}

	if len(errors) > 0 {
		return UserGroupMultiError(errors)
	}

	return nil
}

// UserGroupMultiError is an error wrapping multiple validation errors returned
// by UserGroup.ValidateAll() if the designated constraints aren't met.
type UserGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGroupMultiError) AllErrors() []error { return m }

// UserGroupValidationError is the validation error returned by
// UserGroup.Validate if the designated constraints aren't met.
type UserGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGroupValidationError) ErrorName() string { return "UserGroupValidationError" }

// Error satisfies the builtin error interface
func (e UserGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGroupValidationError{}
