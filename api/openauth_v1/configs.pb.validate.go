// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/openauth/v1/configs.proto

package openauth_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConfigEntity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigEntity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigEntity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigEntityMultiError, or
// nil if none found.
func (m *ConfigEntity) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigEntity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for ReadPerm

	// no validation rules for WritePerm

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ConfigEntityMultiError(errors)
	}

	return nil
}

// ConfigEntityMultiError is an error wrapping multiple validation errors
// returned by ConfigEntity.ValidateAll() if the designated constraints aren't met.
type ConfigEntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigEntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigEntityMultiError) AllErrors() []error { return m }

// ConfigEntityValidationError is the validation error returned by
// ConfigEntity.Validate if the designated constraints aren't met.
type ConfigEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigEntityValidationError) ErrorName() string { return "ConfigEntityValidationError" }

// Error satisfies the builtin error interface
func (e ConfigEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigEntityValidationError{}

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EntityId

	// no validation rules for Key

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for Type

	// no validation rules for Metadata

	// no validation rules for CreatedBy

	// no validation rules for UpdatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	switch v := m.Value.(type) {
	case *Config_StringValue:
		if v == nil {
			err := ConfigValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StringValue
	case *Config_IntValue:
		if v == nil {
			err := ConfigValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for IntValue
	case *Config_FloatValue:
		if v == nil {
			err := ConfigValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for FloatValue
	case *Config_BoolValue:
		if v == nil {
			err := ConfigValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BoolValue
	case *Config_JsonValue:
		if v == nil {
			err := ConfigValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for JsonValue
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on CreateConfigEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConfigEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConfigEntityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConfigEntityRequestMultiError, or nil if none found.
func (m *CreateConfigEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConfigEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateConfigEntityRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDisplayName()) > 255 {
		err := CreateConfigEntityRequestValidationError{
			field:  "DisplayName",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if l := utf8.RuneCountInString(m.GetReadPerm()); l < 1 || l > 100 {
		err := CreateConfigEntityRequestValidationError{
			field:  "ReadPerm",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetWritePerm()); l < 1 || l > 100 {
		err := CreateConfigEntityRequestValidationError{
			field:  "WritePerm",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateConfigEntityRequestMultiError(errors)
	}

	return nil
}

// CreateConfigEntityRequestMultiError is an error wrapping multiple validation
// errors returned by CreateConfigEntityRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateConfigEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConfigEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConfigEntityRequestMultiError) AllErrors() []error { return m }

// CreateConfigEntityRequestValidationError is the validation error returned by
// CreateConfigEntityRequest.Validate if the designated constraints aren't met.
type CreateConfigEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConfigEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConfigEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConfigEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConfigEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConfigEntityRequestValidationError) ErrorName() string {
	return "CreateConfigEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConfigEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConfigEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConfigEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConfigEntityRequestValidationError{}

// Validate checks the field values on GetConfigEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigEntityRequestMultiError, or nil if none found.
func (m *GetConfigEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetConfigEntityRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetConfigEntityRequestMultiError(errors)
	}

	return nil
}

// GetConfigEntityRequestMultiError is an error wrapping multiple validation
// errors returned by GetConfigEntityRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConfigEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigEntityRequestMultiError) AllErrors() []error { return m }

// GetConfigEntityRequestValidationError is the validation error returned by
// GetConfigEntityRequest.Validate if the designated constraints aren't met.
type GetConfigEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigEntityRequestValidationError) ErrorName() string {
	return "GetConfigEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigEntityRequestValidationError{}

// Validate checks the field values on GetConfigEntityByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigEntityByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigEntityByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigEntityByNameRequestMultiError, or nil if none found.
func (m *GetConfigEntityByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigEntityByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := GetConfigEntityByNameRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetConfigEntityByNameRequestMultiError(errors)
	}

	return nil
}

// GetConfigEntityByNameRequestMultiError is an error wrapping multiple
// validation errors returned by GetConfigEntityByNameRequest.ValidateAll() if
// the designated constraints aren't met.
type GetConfigEntityByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigEntityByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigEntityByNameRequestMultiError) AllErrors() []error { return m }

// GetConfigEntityByNameRequestValidationError is the validation error returned
// by GetConfigEntityByNameRequest.Validate if the designated constraints
// aren't met.
type GetConfigEntityByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigEntityByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigEntityByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigEntityByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigEntityByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigEntityByNameRequestValidationError) ErrorName() string {
	return "GetConfigEntityByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigEntityByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigEntityByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigEntityByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigEntityByNameRequestValidationError{}

// Validate checks the field values on ListConfigEntitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfigEntitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigEntitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfigEntitiesRequestMultiError, or nil if none found.
func (m *ListConfigEntitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigEntitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLimit(); val < 1 || val > 100 {
		err := ListConfigEntitiesRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := ListConfigEntitiesRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for All

	if m.Search != nil {

		if utf8.RuneCountInString(m.GetSearch()) > 255 {
			err := ListConfigEntitiesRequestValidationError{
				field:  "Search",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListConfigEntitiesRequestMultiError(errors)
	}

	return nil
}

// ListConfigEntitiesRequestMultiError is an error wrapping multiple validation
// errors returned by ListConfigEntitiesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListConfigEntitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigEntitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigEntitiesRequestMultiError) AllErrors() []error { return m }

// ListConfigEntitiesRequestValidationError is the validation error returned by
// ListConfigEntitiesRequest.Validate if the designated constraints aren't met.
type ListConfigEntitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigEntitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigEntitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigEntitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigEntitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigEntitiesRequestValidationError) ErrorName() string {
	return "ListConfigEntitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigEntitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigEntitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigEntitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigEntitiesRequestValidationError{}

// Validate checks the field values on ListConfigEntitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfigEntitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigEntitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfigEntitiesResponseMultiError, or nil if none found.
func (m *ListConfigEntitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigEntitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConfigEntitiesResponseValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConfigEntitiesResponseValidationError{
						field:  fmt.Sprintf("Entities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConfigEntitiesResponseValidationError{
					field:  fmt.Sprintf("Entities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListConfigEntitiesResponseMultiError(errors)
	}

	return nil
}

// ListConfigEntitiesResponseMultiError is an error wrapping multiple
// validation errors returned by ListConfigEntitiesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListConfigEntitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigEntitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigEntitiesResponseMultiError) AllErrors() []error { return m }

// ListConfigEntitiesResponseValidationError is the validation error returned
// by ListConfigEntitiesResponse.Validate if the designated constraints aren't met.
type ListConfigEntitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigEntitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigEntitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigEntitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigEntitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigEntitiesResponseValidationError) ErrorName() string {
	return "ListConfigEntitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigEntitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigEntitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigEntitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigEntitiesResponseValidationError{}

// Validate checks the field values on UpdateConfigEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigEntityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigEntityRequestMultiError, or nil if none found.
func (m *UpdateConfigEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateConfigEntityRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
			err := UpdateConfigEntityRequestValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DisplayName != nil {

		if utf8.RuneCountInString(m.GetDisplayName()) > 255 {
			err := UpdateConfigEntityRequestValidationError{
				field:  "DisplayName",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.ReadPerm != nil {

		if l := utf8.RuneCountInString(m.GetReadPerm()); l < 1 || l > 100 {
			err := UpdateConfigEntityRequestValidationError{
				field:  "ReadPerm",
				reason: "value length must be between 1 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.WritePerm != nil {

		if l := utf8.RuneCountInString(m.GetWritePerm()); l < 1 || l > 100 {
			err := UpdateConfigEntityRequestValidationError{
				field:  "WritePerm",
				reason: "value length must be between 1 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateConfigEntityRequestMultiError(errors)
	}

	return nil
}

// UpdateConfigEntityRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigEntityRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateConfigEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigEntityRequestMultiError) AllErrors() []error { return m }

// UpdateConfigEntityRequestValidationError is the validation error returned by
// UpdateConfigEntityRequest.Validate if the designated constraints aren't met.
type UpdateConfigEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigEntityRequestValidationError) ErrorName() string {
	return "UpdateConfigEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigEntityRequestValidationError{}

// Validate checks the field values on DeleteConfigEntityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConfigEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConfigEntityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConfigEntityRequestMultiError, or nil if none found.
func (m *DeleteConfigEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConfigEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteConfigEntityRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteConfigEntityRequestMultiError(errors)
	}

	return nil
}

// DeleteConfigEntityRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteConfigEntityRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteConfigEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConfigEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConfigEntityRequestMultiError) AllErrors() []error { return m }

// DeleteConfigEntityRequestValidationError is the validation error returned by
// DeleteConfigEntityRequest.Validate if the designated constraints aren't met.
type DeleteConfigEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConfigEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConfigEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConfigEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConfigEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConfigEntityRequestValidationError) ErrorName() string {
	return "DeleteConfigEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConfigEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConfigEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConfigEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConfigEntityRequestValidationError{}

// Validate checks the field values on CreateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConfigRequestMultiError, or nil if none found.
func (m *CreateConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntityId() <= 0 {
		err := CreateConfigRequestValidationError{
			field:  "EntityId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 255 {
		err := CreateConfigRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDisplayName()) > 255 {
		err := CreateConfigRequestValidationError{
			field:  "DisplayName",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Type

	switch v := m.Value.(type) {
	case *CreateConfigRequest_StringValue:
		if v == nil {
			err := CreateConfigRequestValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StringValue
	case *CreateConfigRequest_IntValue:
		if v == nil {
			err := CreateConfigRequestValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for IntValue
	case *CreateConfigRequest_FloatValue:
		if v == nil {
			err := CreateConfigRequestValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for FloatValue
	case *CreateConfigRequest_BoolValue:
		if v == nil {
			err := CreateConfigRequestValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BoolValue
	case *CreateConfigRequest_JsonValue:
		if v == nil {
			err := CreateConfigRequestValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for JsonValue
	default:
		_ = v // ensures v is used
	}

	if m.Metadata != nil {
		// no validation rules for Metadata
	}

	if len(errors) > 0 {
		return CreateConfigRequestMultiError(errors)
	}

	return nil
}

// CreateConfigRequestMultiError is an error wrapping multiple validation
// errors returned by CreateConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConfigRequestMultiError) AllErrors() []error { return m }

// CreateConfigRequestValidationError is the validation error returned by
// CreateConfigRequest.Validate if the designated constraints aren't met.
type CreateConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConfigRequestValidationError) ErrorName() string {
	return "CreateConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConfigRequestValidationError{}

// Validate checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigRequestMultiError, or nil if none found.
func (m *UpdateConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateConfigRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Value.(type) {
	case *UpdateConfigRequest_StringValue:
		if v == nil {
			err := UpdateConfigRequestValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StringValue
	case *UpdateConfigRequest_IntValue:
		if v == nil {
			err := UpdateConfigRequestValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for IntValue
	case *UpdateConfigRequest_FloatValue:
		if v == nil {
			err := UpdateConfigRequestValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for FloatValue
	case *UpdateConfigRequest_BoolValue:
		if v == nil {
			err := UpdateConfigRequestValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BoolValue
	case *UpdateConfigRequest_JsonValue:
		if v == nil {
			err := UpdateConfigRequestValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for JsonValue
	default:
		_ = v // ensures v is used
	}

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
			err := UpdateConfigRequestValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DisplayName != nil {

		if utf8.RuneCountInString(m.GetDisplayName()) > 255 {
			err := UpdateConfigRequestValidationError{
				field:  "DisplayName",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Metadata != nil {
		// no validation rules for Metadata
	}

	if len(errors) > 0 {
		return UpdateConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateConfigRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigRequestMultiError) AllErrors() []error { return m }

// UpdateConfigRequestValidationError is the validation error returned by
// UpdateConfigRequest.Validate if the designated constraints aren't met.
type UpdateConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigRequestValidationError) ErrorName() string {
	return "UpdateConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigRequestValidationError{}

// Validate checks the field values on DeleteConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConfigRequestMultiError, or nil if none found.
func (m *DeleteConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteConfigRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteConfigRequestMultiError(errors)
	}

	return nil
}

// DeleteConfigRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConfigRequestMultiError) AllErrors() []error { return m }

// DeleteConfigRequestValidationError is the validation error returned by
// DeleteConfigRequest.Validate if the designated constraints aren't met.
type DeleteConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConfigRequestValidationError) ErrorName() string {
	return "DeleteConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConfigRequestValidationError{}

// Validate checks the field values on GetConfigRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigRequestMultiError, or nil if none found.
func (m *GetConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetConfigRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetConfigRequestMultiError(errors)
	}

	return nil
}

// GetConfigRequestMultiError is an error wrapping multiple validation errors
// returned by GetConfigRequest.ValidateAll() if the designated constraints
// aren't met.
type GetConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigRequestMultiError) AllErrors() []error { return m }

// GetConfigRequestValidationError is the validation error returned by
// GetConfigRequest.Validate if the designated constraints aren't met.
type GetConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigRequestValidationError) ErrorName() string { return "GetConfigRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigRequestValidationError{}

// Validate checks the field values on GetConfigByKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigByKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigByKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigByKeyRequestMultiError, or nil if none found.
func (m *GetConfigByKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigByKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 255 {
		err := GetConfigByKeyRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.EntityIdentifier.(type) {
	case *GetConfigByKeyRequest_EntityId:
		if v == nil {
			err := GetConfigByKeyRequestValidationError{
				field:  "EntityIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetEntityId() <= 0 {
			err := GetConfigByKeyRequestValidationError{
				field:  "EntityId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetConfigByKeyRequest_EntityName:
		if v == nil {
			err := GetConfigByKeyRequestValidationError{
				field:  "EntityIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetEntityName()); l < 1 || l > 255 {
			err := GetConfigByKeyRequestValidationError{
				field:  "EntityName",
				reason: "value length must be between 1 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetConfigByKeyRequestMultiError(errors)
	}

	return nil
}

// GetConfigByKeyRequestMultiError is an error wrapping multiple validation
// errors returned by GetConfigByKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConfigByKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigByKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigByKeyRequestMultiError) AllErrors() []error { return m }

// GetConfigByKeyRequestValidationError is the validation error returned by
// GetConfigByKeyRequest.Validate if the designated constraints aren't met.
type GetConfigByKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigByKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigByKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigByKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigByKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigByKeyRequestValidationError) ErrorName() string {
	return "GetConfigByKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigByKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigByKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigByKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigByKeyRequestValidationError{}

// Validate checks the field values on ListConfigsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfigsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfigsRequestMultiError, or nil if none found.
func (m *ListConfigsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLimit(); val < 1 || val > 100 {
		err := ListConfigsRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := ListConfigsRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for All

	if m.EntityId != nil {

		if m.GetEntityId() <= 0 {
			err := ListConfigsRequestValidationError{
				field:  "EntityId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Search != nil {

		if utf8.RuneCountInString(m.GetSearch()) > 255 {
			err := ListConfigsRequestValidationError{
				field:  "Search",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Type != nil {

		if _, ok := _ListConfigsRequest_Type_InLookup[m.GetType()]; !ok {
			err := ListConfigsRequestValidationError{
				field:  "Type",
				reason: "value must be in list [string int float bool json choice]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListConfigsRequestMultiError(errors)
	}

	return nil
}

// ListConfigsRequestMultiError is an error wrapping multiple validation errors
// returned by ListConfigsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListConfigsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigsRequestMultiError) AllErrors() []error { return m }

// ListConfigsRequestValidationError is the validation error returned by
// ListConfigsRequest.Validate if the designated constraints aren't met.
type ListConfigsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigsRequestValidationError) ErrorName() string {
	return "ListConfigsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigsRequestValidationError{}

var _ListConfigsRequest_Type_InLookup = map[string]struct{}{
	"string": {},
	"int":    {},
	"float":  {},
	"bool":   {},
	"json":   {},
	"choice": {},
}

// Validate checks the field values on ListConfigsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfigsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfigsResponseMultiError, or nil if none found.
func (m *ListConfigsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConfigsResponseValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConfigsResponseValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConfigsResponseValidationError{
					field:  fmt.Sprintf("Configs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListConfigsResponseMultiError(errors)
	}

	return nil
}

// ListConfigsResponseMultiError is an error wrapping multiple validation
// errors returned by ListConfigsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListConfigsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigsResponseMultiError) AllErrors() []error { return m }

// ListConfigsResponseValidationError is the validation error returned by
// ListConfigsResponse.Validate if the designated constraints aren't met.
type ListConfigsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigsResponseValidationError) ErrorName() string {
	return "ListConfigsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigsResponseValidationError{}

// Validate checks the field values on GetConfigsByKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigsByKeysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigsByKeysRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigsByKeysRequestMultiError, or nil if none found.
func (m *GetConfigsByKeysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigsByKeysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetKeys()); l < 1 || l > 100 {
		err := GetConfigsByKeysRequestValidationError{
			field:  "Keys",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 1 || l > 255 {
			err := GetConfigsByKeysRequestValidationError{
				field:  fmt.Sprintf("Keys[%v]", idx),
				reason: "value length must be between 1 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	switch v := m.EntityIdentifier.(type) {
	case *GetConfigsByKeysRequest_EntityId:
		if v == nil {
			err := GetConfigsByKeysRequestValidationError{
				field:  "EntityIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetEntityId() <= 0 {
			err := GetConfigsByKeysRequestValidationError{
				field:  "EntityId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetConfigsByKeysRequest_EntityName:
		if v == nil {
			err := GetConfigsByKeysRequestValidationError{
				field:  "EntityIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetEntityName()); l < 1 || l > 255 {
			err := GetConfigsByKeysRequestValidationError{
				field:  "EntityName",
				reason: "value length must be between 1 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetConfigsByKeysRequestMultiError(errors)
	}

	return nil
}

// GetConfigsByKeysRequestMultiError is an error wrapping multiple validation
// errors returned by GetConfigsByKeysRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConfigsByKeysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigsByKeysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigsByKeysRequestMultiError) AllErrors() []error { return m }

// GetConfigsByKeysRequestValidationError is the validation error returned by
// GetConfigsByKeysRequest.Validate if the designated constraints aren't met.
type GetConfigsByKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigsByKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigsByKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigsByKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigsByKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigsByKeysRequestValidationError) ErrorName() string {
	return "GetConfigsByKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigsByKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigsByKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigsByKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigsByKeysRequestValidationError{}

// Validate checks the field values on GetConfigsByKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigsByKeysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigsByKeysResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigsByKeysResponseMultiError, or nil if none found.
func (m *GetConfigsByKeysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigsByKeysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetConfigs()))
		i := 0
		for key := range m.GetConfigs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfigs()[key]
			_ = val

			// no validation rules for Configs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetConfigsByKeysResponseValidationError{
							field:  fmt.Sprintf("Configs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetConfigsByKeysResponseValidationError{
							field:  fmt.Sprintf("Configs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetConfigsByKeysResponseValidationError{
						field:  fmt.Sprintf("Configs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetConfigsByKeysResponseMultiError(errors)
	}

	return nil
}

// GetConfigsByKeysResponseMultiError is an error wrapping multiple validation
// errors returned by GetConfigsByKeysResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConfigsByKeysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigsByKeysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigsByKeysResponseMultiError) AllErrors() []error { return m }

// GetConfigsByKeysResponseValidationError is the validation error returned by
// GetConfigsByKeysResponse.Validate if the designated constraints aren't met.
type GetConfigsByKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigsByKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigsByKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigsByKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigsByKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigsByKeysResponseValidationError) ErrorName() string {
	return "GetConfigsByKeysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigsByKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigsByKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigsByKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigsByKeysResponseValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on UpdateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateResponseMultiError,
// or nil if none found.
func (m *UpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return UpdateResponseMultiError(errors)
	}

	return nil
}

// UpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResponseMultiError) AllErrors() []error { return m }

// UpdateResponseValidationError is the validation error returned by
// UpdateResponse.Validate if the designated constraints aren't met.
type UpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResponseValidationError) ErrorName() string { return "UpdateResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResponseValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}
