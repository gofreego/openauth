// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/openauth/v1/permission_assignments.proto

package openauth_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AssignPermissionsToGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignPermissionsToGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignPermissionsToGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignPermissionsToGroupRequestMultiError, or nil if none found.
func (m *AssignPermissionsToGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignPermissionsToGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := AssignPermissionsToGroupRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetPermissionsIds()); l < 1 || l > 100 {
		err := AssignPermissionsToGroupRequestValidationError{
			field:  "PermissionsIds",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPermissionsIds() {
		_, _ = idx, item

		if item <= 0 {
			err := AssignPermissionsToGroupRequestValidationError{
				field:  fmt.Sprintf("PermissionsIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AssignPermissionsToGroupRequestMultiError(errors)
	}

	return nil
}

// AssignPermissionsToGroupRequestMultiError is an error wrapping multiple
// validation errors returned by AssignPermissionsToGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type AssignPermissionsToGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignPermissionsToGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignPermissionsToGroupRequestMultiError) AllErrors() []error { return m }

// AssignPermissionsToGroupRequestValidationError is the validation error
// returned by AssignPermissionsToGroupRequest.Validate if the designated
// constraints aren't met.
type AssignPermissionsToGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignPermissionsToGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignPermissionsToGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignPermissionsToGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignPermissionsToGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignPermissionsToGroupRequestValidationError) ErrorName() string {
	return "AssignPermissionsToGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignPermissionsToGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignPermissionsToGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignPermissionsToGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignPermissionsToGroupRequestValidationError{}

// Validate checks the field values on AssignPermissionsToGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AssignPermissionsToGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignPermissionsToGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignPermissionsToGroupResponseMultiError, or nil if none found.
func (m *AssignPermissionsToGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignPermissionsToGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return AssignPermissionsToGroupResponseMultiError(errors)
	}

	return nil
}

// AssignPermissionsToGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// AssignPermissionsToGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type AssignPermissionsToGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignPermissionsToGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignPermissionsToGroupResponseMultiError) AllErrors() []error { return m }

// AssignPermissionsToGroupResponseValidationError is the validation error
// returned by AssignPermissionsToGroupResponse.Validate if the designated
// constraints aren't met.
type AssignPermissionsToGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignPermissionsToGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignPermissionsToGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignPermissionsToGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignPermissionsToGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignPermissionsToGroupResponseValidationError) ErrorName() string {
	return "AssignPermissionsToGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignPermissionsToGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignPermissionsToGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignPermissionsToGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignPermissionsToGroupResponseValidationError{}

// Validate checks the field values on RemovePermissionsFromGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemovePermissionsFromGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePermissionsFromGroupRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemovePermissionsFromGroupRequestMultiError, or nil if none found.
func (m *RemovePermissionsFromGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePermissionsFromGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := RemovePermissionsFromGroupRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetPermissionsIds()); l < 1 || l > 100 {
		err := RemovePermissionsFromGroupRequestValidationError{
			field:  "PermissionsIds",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPermissionsIds() {
		_, _ = idx, item

		if item <= 0 {
			err := RemovePermissionsFromGroupRequestValidationError{
				field:  fmt.Sprintf("PermissionsIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RemovePermissionsFromGroupRequestMultiError(errors)
	}

	return nil
}

// RemovePermissionsFromGroupRequestMultiError is an error wrapping multiple
// validation errors returned by
// RemovePermissionsFromGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type RemovePermissionsFromGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePermissionsFromGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePermissionsFromGroupRequestMultiError) AllErrors() []error { return m }

// RemovePermissionsFromGroupRequestValidationError is the validation error
// returned by RemovePermissionsFromGroupRequest.Validate if the designated
// constraints aren't met.
type RemovePermissionsFromGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePermissionsFromGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePermissionsFromGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePermissionsFromGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePermissionsFromGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePermissionsFromGroupRequestValidationError) ErrorName() string {
	return "RemovePermissionsFromGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePermissionsFromGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePermissionsFromGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePermissionsFromGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePermissionsFromGroupRequestValidationError{}

// Validate checks the field values on RemovePermissionsFromGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemovePermissionsFromGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePermissionsFromGroupResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemovePermissionsFromGroupResponseMultiError, or nil if none found.
func (m *RemovePermissionsFromGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePermissionsFromGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return RemovePermissionsFromGroupResponseMultiError(errors)
	}

	return nil
}

// RemovePermissionsFromGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// RemovePermissionsFromGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type RemovePermissionsFromGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePermissionsFromGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePermissionsFromGroupResponseMultiError) AllErrors() []error { return m }

// RemovePermissionsFromGroupResponseValidationError is the validation error
// returned by RemovePermissionsFromGroupResponse.Validate if the designated
// constraints aren't met.
type RemovePermissionsFromGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePermissionsFromGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePermissionsFromGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePermissionsFromGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePermissionsFromGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePermissionsFromGroupResponseValidationError) ErrorName() string {
	return "RemovePermissionsFromGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePermissionsFromGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePermissionsFromGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePermissionsFromGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePermissionsFromGroupResponseValidationError{}

// Validate checks the field values on ListGroupPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupPermissionsRequestMultiError, or nil if none found.
func (m *ListGroupPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGroupId() <= 0 {
		err := ListGroupPermissionsRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListGroupPermissionsRequestMultiError(errors)
	}

	return nil
}

// ListGroupPermissionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListGroupPermissionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListGroupPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupPermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupPermissionsRequestMultiError) AllErrors() []error { return m }

// ListGroupPermissionsRequestValidationError is the validation error returned
// by ListGroupPermissionsRequest.Validate if the designated constraints
// aren't met.
type ListGroupPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupPermissionsRequestValidationError) ErrorName() string {
	return "ListGroupPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupPermissionsRequestValidationError{}

// Validate checks the field values on ListGroupPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupPermissionsResponseMultiError, or nil if none found.
func (m *ListGroupPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupPermissionsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGroupPermissionsResponseMultiError(errors)
	}

	return nil
}

// ListGroupPermissionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListGroupPermissionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListGroupPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupPermissionsResponseMultiError) AllErrors() []error { return m }

// ListGroupPermissionsResponseValidationError is the validation error returned
// by ListGroupPermissionsResponse.Validate if the designated constraints
// aren't met.
type ListGroupPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupPermissionsResponseValidationError) ErrorName() string {
	return "ListGroupPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupPermissionsResponseValidationError{}

// Validate checks the field values on AssignPermissionsToUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignPermissionsToUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignPermissionsToUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignPermissionsToUserRequestMultiError, or nil if none found.
func (m *AssignPermissionsToUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignPermissionsToUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := AssignPermissionsToUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetPermissionsIds()); l < 1 || l > 100 {
		err := AssignPermissionsToUserRequestValidationError{
			field:  "PermissionsIds",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPermissionsIds() {
		_, _ = idx, item

		if item <= 0 {
			err := AssignPermissionsToUserRequestValidationError{
				field:  fmt.Sprintf("PermissionsIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ExpiresAt != nil {

		if m.GetExpiresAt() < 0 {
			err := AssignPermissionsToUserRequestValidationError{
				field:  "ExpiresAt",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AssignPermissionsToUserRequestMultiError(errors)
	}

	return nil
}

// AssignPermissionsToUserRequestMultiError is an error wrapping multiple
// validation errors returned by AssignPermissionsToUserRequest.ValidateAll()
// if the designated constraints aren't met.
type AssignPermissionsToUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignPermissionsToUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignPermissionsToUserRequestMultiError) AllErrors() []error { return m }

// AssignPermissionsToUserRequestValidationError is the validation error
// returned by AssignPermissionsToUserRequest.Validate if the designated
// constraints aren't met.
type AssignPermissionsToUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignPermissionsToUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignPermissionsToUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignPermissionsToUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignPermissionsToUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignPermissionsToUserRequestValidationError) ErrorName() string {
	return "AssignPermissionsToUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignPermissionsToUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignPermissionsToUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignPermissionsToUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignPermissionsToUserRequestValidationError{}

// Validate checks the field values on AssignPermissionsToUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignPermissionsToUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignPermissionsToUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignPermissionsToUserResponseMultiError, or nil if none found.
func (m *AssignPermissionsToUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignPermissionsToUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return AssignPermissionsToUserResponseMultiError(errors)
	}

	return nil
}

// AssignPermissionsToUserResponseMultiError is an error wrapping multiple
// validation errors returned by AssignPermissionsToUserResponse.ValidateAll()
// if the designated constraints aren't met.
type AssignPermissionsToUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignPermissionsToUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignPermissionsToUserResponseMultiError) AllErrors() []error { return m }

// AssignPermissionsToUserResponseValidationError is the validation error
// returned by AssignPermissionsToUserResponse.Validate if the designated
// constraints aren't met.
type AssignPermissionsToUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignPermissionsToUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignPermissionsToUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignPermissionsToUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignPermissionsToUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignPermissionsToUserResponseValidationError) ErrorName() string {
	return "AssignPermissionsToUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignPermissionsToUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignPermissionsToUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignPermissionsToUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignPermissionsToUserResponseValidationError{}

// Validate checks the field values on RemovePermissionsFromUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemovePermissionsFromUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePermissionsFromUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemovePermissionsFromUserRequestMultiError, or nil if none found.
func (m *RemovePermissionsFromUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePermissionsFromUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := RemovePermissionsFromUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetPermissionsIds()); l < 1 || l > 100 {
		err := RemovePermissionsFromUserRequestValidationError{
			field:  "PermissionsIds",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPermissionsIds() {
		_, _ = idx, item

		if item <= 0 {
			err := RemovePermissionsFromUserRequestValidationError{
				field:  fmt.Sprintf("PermissionsIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RemovePermissionsFromUserRequestMultiError(errors)
	}

	return nil
}

// RemovePermissionsFromUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// RemovePermissionsFromUserRequest.ValidateAll() if the designated
// constraints aren't met.
type RemovePermissionsFromUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePermissionsFromUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePermissionsFromUserRequestMultiError) AllErrors() []error { return m }

// RemovePermissionsFromUserRequestValidationError is the validation error
// returned by RemovePermissionsFromUserRequest.Validate if the designated
// constraints aren't met.
type RemovePermissionsFromUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePermissionsFromUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePermissionsFromUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePermissionsFromUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePermissionsFromUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePermissionsFromUserRequestValidationError) ErrorName() string {
	return "RemovePermissionsFromUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePermissionsFromUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePermissionsFromUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePermissionsFromUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePermissionsFromUserRequestValidationError{}

// Validate checks the field values on RemovePermissionsFromUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemovePermissionsFromUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePermissionsFromUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RemovePermissionsFromUserResponseMultiError, or nil if none found.
func (m *RemovePermissionsFromUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePermissionsFromUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return RemovePermissionsFromUserResponseMultiError(errors)
	}

	return nil
}

// RemovePermissionsFromUserResponseMultiError is an error wrapping multiple
// validation errors returned by
// RemovePermissionsFromUserResponse.ValidateAll() if the designated
// constraints aren't met.
type RemovePermissionsFromUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePermissionsFromUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePermissionsFromUserResponseMultiError) AllErrors() []error { return m }

// RemovePermissionsFromUserResponseValidationError is the validation error
// returned by RemovePermissionsFromUserResponse.Validate if the designated
// constraints aren't met.
type RemovePermissionsFromUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePermissionsFromUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePermissionsFromUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePermissionsFromUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePermissionsFromUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePermissionsFromUserResponseValidationError) ErrorName() string {
	return "RemovePermissionsFromUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePermissionsFromUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePermissionsFromUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePermissionsFromUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePermissionsFromUserResponseValidationError{}

// Validate checks the field values on ListUserPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserPermissionsRequestMultiError, or nil if none found.
func (m *ListUserPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListUserPermissionsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUserPermissionsRequestMultiError(errors)
	}

	return nil
}

// ListUserPermissionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserPermissionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListUserPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserPermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserPermissionsRequestMultiError) AllErrors() []error { return m }

// ListUserPermissionsRequestValidationError is the validation error returned
// by ListUserPermissionsRequest.Validate if the designated constraints aren't met.
type ListUserPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserPermissionsRequestValidationError) ErrorName() string {
	return "ListUserPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserPermissionsRequestValidationError{}

// Validate checks the field values on ListUserPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserPermissionsResponseMultiError, or nil if none found.
func (m *ListUserPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserPermissionsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserPermissionsResponseMultiError(errors)
	}

	return nil
}

// ListUserPermissionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserPermissionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserPermissionsResponseMultiError) AllErrors() []error { return m }

// ListUserPermissionsResponseValidationError is the validation error returned
// by ListUserPermissionsResponse.Validate if the designated constraints
// aren't met.
type ListUserPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserPermissionsResponseValidationError) ErrorName() string {
	return "ListUserPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserPermissionsResponseValidationError{}

// Validate checks the field values on GetUserEffectivePermissionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserEffectivePermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserEffectivePermissionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserEffectivePermissionsRequestMultiError, or nil if none found.
func (m *GetUserEffectivePermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserEffectivePermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserEffectivePermissionsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserEffectivePermissionsRequestMultiError(errors)
	}

	return nil
}

// GetUserEffectivePermissionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserEffectivePermissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserEffectivePermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserEffectivePermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserEffectivePermissionsRequestMultiError) AllErrors() []error { return m }

// GetUserEffectivePermissionsRequestValidationError is the validation error
// returned by GetUserEffectivePermissionsRequest.Validate if the designated
// constraints aren't met.
type GetUserEffectivePermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserEffectivePermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserEffectivePermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserEffectivePermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserEffectivePermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserEffectivePermissionsRequestValidationError) ErrorName() string {
	return "GetUserEffectivePermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserEffectivePermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserEffectivePermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserEffectivePermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserEffectivePermissionsRequestValidationError{}

// Validate checks the field values on EffectivePermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EffectivePermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EffectivePermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EffectivePermissionMultiError, or nil if none found.
func (m *EffectivePermission) ValidateAll() error {
	return m.validate(true)
}

func (m *EffectivePermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PermissionId

	// no validation rules for PermissionName

	// no validation rules for PermissionDisplayName

	// no validation rules for Source

	// no validation rules for GrantedAt

	// no validation rules for GrantedBy

	if m.PermissionDescription != nil {
		// no validation rules for PermissionDescription
	}

	if m.GroupId != nil {
		// no validation rules for GroupId
	}

	if m.GroupName != nil {
		// no validation rules for GroupName
	}

	if m.GroupDisplayName != nil {
		// no validation rules for GroupDisplayName
	}

	if m.ExpiresAt != nil {
		// no validation rules for ExpiresAt
	}

	if len(errors) > 0 {
		return EffectivePermissionMultiError(errors)
	}

	return nil
}

// EffectivePermissionMultiError is an error wrapping multiple validation
// errors returned by EffectivePermission.ValidateAll() if the designated
// constraints aren't met.
type EffectivePermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EffectivePermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EffectivePermissionMultiError) AllErrors() []error { return m }

// EffectivePermissionValidationError is the validation error returned by
// EffectivePermission.Validate if the designated constraints aren't met.
type EffectivePermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EffectivePermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EffectivePermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EffectivePermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EffectivePermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EffectivePermissionValidationError) ErrorName() string {
	return "EffectivePermissionValidationError"
}

// Error satisfies the builtin error interface
func (e EffectivePermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEffectivePermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EffectivePermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EffectivePermissionValidationError{}

// Validate checks the field values on GetUserEffectivePermissionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserEffectivePermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserEffectivePermissionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserEffectivePermissionsResponseMultiError, or nil if none found.
func (m *GetUserEffectivePermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserEffectivePermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserEffectivePermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserEffectivePermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserEffectivePermissionsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserEffectivePermissionsResponseMultiError(errors)
	}

	return nil
}

// GetUserEffectivePermissionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserEffectivePermissionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserEffectivePermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserEffectivePermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserEffectivePermissionsResponseMultiError) AllErrors() []error { return m }

// GetUserEffectivePermissionsResponseValidationError is the validation error
// returned by GetUserEffectivePermissionsResponse.Validate if the designated
// constraints aren't met.
type GetUserEffectivePermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserEffectivePermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserEffectivePermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserEffectivePermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserEffectivePermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserEffectivePermissionsResponseValidationError) ErrorName() string {
	return "GetUserEffectivePermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserEffectivePermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserEffectivePermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserEffectivePermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserEffectivePermissionsResponseValidationError{}
