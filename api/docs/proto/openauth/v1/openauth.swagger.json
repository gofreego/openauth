{
  "swagger": "2.0",
  "info": {
    "title": "OpenAuth API",
    "description": "OpenAuth is an open-source authentication and authorization service providing user management, RBAC, and secure access control for applications.",
    "version": "v1.0.0"
  },
  "tags": [
    {
      "name": "Ping",
      "description": "Health check endpoints"
    },
    {
      "name": "Statistics",
      "description": "System statistics and metrics"
    },
    {
      "name": "Permissions",
      "description": "Permission management in RBAC system"
    },
    {
      "name": "Groups",
      "description": "Group management for organizing users"
    },
    {
      "name": "Group Users",
      "description": "User-group relationship management"
    },
    {
      "name": "Permission Assignments",
      "description": "Permission assignment to users and groups"
    },
    {
      "name": "User Registration",
      "description": "User signup and verification"
    },
    {
      "name": "User Management",
      "description": "User account management"
    },
    {
      "name": "Profile Management",
      "description": "User profile management"
    },
    {
      "name": "Authentication",
      "description": "User authentication and token management"
    },
    {
      "name": "Session Management",
      "description": "User session management"
    },
    {
      "name": "Config Management",
      "description": "Configuration entity and key-value management"
    },
    {
      "name": "OpenAuth"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/openauth/v1/auth/logout": {
      "post": {
        "summary": "Logout user",
        "description": "Terminate user session(s).",
        "operationId": "OpenAuth_Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LogoutResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LogoutRequest"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/openauth/v1/auth/refresh": {
      "post": {
        "summary": "Refresh access token",
        "description": "Generate new access token using refresh token.",
        "operationId": "OpenAuth_RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RefreshTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RefreshTokenRequest"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/openauth/v1/auth/signin": {
      "post": {
        "summary": "Sign in user",
        "description": "Authenticate a user and create a new session.",
        "operationId": "OpenAuth_SignIn",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SignInResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SignInRequest"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/openauth/v1/auth/validate": {
      "post": {
        "summary": "Validate access token",
        "description": "Check if an access token is valid and active.",
        "operationId": "OpenAuth_ValidateToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ValidateTokenRequest"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/openauth/v1/config-entities": {
      "get": {
        "summary": "List config entities",
        "description": "Retrieve a list of configuration entities with optional filtering and pagination.",
        "operationId": "OpenAuth_ListConfigEntities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListConfigEntitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Maximum number of entities to return (default: 10, max: 100)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "description": "Number of entities to skip for pagination (default: 0)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "search",
            "description": "Search term to filter entities by name or display_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "all",
            "description": "Return all entities without pagination",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Config Management"
        ]
      },
      "post": {
        "summary": "Create a new config entity",
        "description": "Create a new configuration entity to group related configuration settings.",
        "operationId": "OpenAuth_CreateConfigEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ConfigEntity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateConfigEntityRequest"
            }
          }
        ],
        "tags": [
          "Config Management"
        ]
      }
    },
    "/openauth/v1/config-entities/{id}": {
      "get": {
        "summary": "Get config entity by ID",
        "description": "Retrieve a specific configuration entity by its unique identifier.",
        "operationId": "OpenAuth_GetConfigEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ConfigEntity"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the config entity to retrieve",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Config Management"
        ]
      },
      "delete": {
        "summary": "Delete config entity",
        "description": "Delete a configuration entity and all its associated configs.",
        "operationId": "OpenAuth_DeleteConfigEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the config entity to delete",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Config Management"
        ]
      },
      "put": {
        "summary": "Update config entity",
        "description": "Update an existing configuration entity.",
        "operationId": "OpenAuth_UpdateConfigEntity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the config entity to update",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthUpdateConfigEntityBody"
            }
          }
        ],
        "tags": [
          "Config Management"
        ]
      }
    },
    "/openauth/v1/configs": {
      "get": {
        "summary": "List configs",
        "description": "Retrieve a list of configurations with optional filtering and pagination.",
        "operationId": "OpenAuth_ListConfigs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListConfigsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "entityId",
            "description": "Entity ID to filter configs (optional)",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "Maximum number of configs to return (default: 10, max: 100)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "description": "Number of configs to skip for pagination (default: 0)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "search",
            "description": "Search term to filter configs by key or display_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "all",
            "description": "Return all configs without pagination",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Config Management"
        ]
      },
      "post": {
        "summary": "Create a new config",
        "description": "Create a new configuration key-value pair within an entity.",
        "operationId": "OpenAuth_CreateConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Config"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateConfigRequest"
            }
          }
        ],
        "tags": [
          "Config Management"
        ]
      }
    },
    "/openauth/v1/configs/{id}": {
      "get": {
        "summary": "Get config by ID",
        "description": "Retrieve a specific configuration by its unique identifier.",
        "operationId": "OpenAuth_GetConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Config"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the config to retrieve",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Config Management"
        ]
      },
      "delete": {
        "summary": "Delete config",
        "description": "Delete a configuration.",
        "operationId": "OpenAuth_DeleteConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the config to delete",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Config Management"
        ]
      },
      "put": {
        "summary": "Update config",
        "description": "Update an existing configuration.",
        "operationId": "OpenAuth_UpdateConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the config to update",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthUpdateConfigBody"
            }
          }
        ],
        "tags": [
          "Config Management"
        ]
      }
    },
    "/openauth/v1/entities/{entityName}/configs/batch": {
      "post": {
        "summary": "Get multiple configs by keys",
        "description": "Retrieve multiple configurations by their keys within an entity.",
        "operationId": "OpenAuth_GetConfigsByKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetConfigsByKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthGetConfigsByKeysBody"
            }
          }
        ],
        "tags": [
          "Config Management"
        ]
      }
    },
    "/openauth/v1/groups": {
      "get": {
        "summary": "List groups",
        "description": "Retrieve groups with optional filtering and pagination.",
        "operationId": "OpenAuth_ListGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Maximum number of groups to return (default: 10, max: 100)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "description": "Number of groups to skip (for pagination)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "search",
            "description": "Optional search query (searches name, display_name)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "all",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "post": {
        "summary": "Create a new group",
        "description": "Create a new group in the system for organizing users and permissions.",
        "operationId": "OpenAuth_CreateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateGroupRequest"
            }
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/openauth/v1/groups/{groupId}/permissions": {
      "get": {
        "summary": "List group permissions",
        "description": "Retrieve all permissions assigned to a specific group.",
        "operationId": "OpenAuth_ListGroupPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListGroupPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "description": "ID of the group to list permissions for",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Permission Assignments"
        ]
      },
      "post": {
        "summary": "Assign permissions to group",
        "description": "Assign permissions to a group.",
        "operationId": "OpenAuth_AssignPermissionsToGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AssignPermissionsToGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "description": "ID of the group to assign the permission to",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthAssignPermissionsToGroupBody"
            }
          }
        ],
        "tags": [
          "Permission Assignments"
        ]
      },
      "put": {
        "summary": "Remove permissions from group",
        "description": "Remove permissions from a group.",
        "operationId": "OpenAuth_RemovePermissionsFromGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemovePermissionsFromGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "description": "ID of the group to remove the permission from",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthRemovePermissionsFromGroupBody"
            }
          }
        ],
        "tags": [
          "Permission Assignments"
        ]
      }
    },
    "/openauth/v1/groups/{groupId}/users": {
      "get": {
        "summary": "List group users",
        "description": "Retrieve all users in a specific group.",
        "operationId": "OpenAuth_ListGroupUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListGroupUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "Pagination",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Group Users"
        ]
      },
      "post": {
        "summary": "Assign user to group",
        "description": "Add a user to a group.",
        "operationId": "OpenAuth_AssignUsersToGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AssignUsersToGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthAssignUsersToGroupBody"
            }
          }
        ],
        "tags": [
          "Group Users"
        ]
      },
      "put": {
        "summary": "Remove users from group",
        "description": "Remove users from a group.",
        "operationId": "OpenAuth_RemoveUsersFromGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveUsersFromGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthRemoveUsersFromGroupBody"
            }
          }
        ],
        "tags": [
          "Group Users"
        ]
      }
    },
    "/openauth/v1/groups/{id}": {
      "get": {
        "summary": "Get a group by ID",
        "description": "Retrieve a specific group by ID, UUID, or name.",
        "operationId": "OpenAuth_GetGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "delete": {
        "summary": "Delete a group",
        "description": "Remove a group from the system.",
        "operationId": "OpenAuth_DeleteGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "put": {
        "summary": "Update a group",
        "description": "Modify an existing group's details.",
        "operationId": "OpenAuth_UpdateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthUpdateGroupBody"
            }
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/openauth/v1/permissions": {
      "get": {
        "summary": "List permissions",
        "description": "Retrieve permissions with optional filtering and pagination.",
        "operationId": "OpenAuth_ListPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Maximum number of permissions to return (default: 10, max: 100)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "description": "Number of permissions to skip for pagination (default: 0)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "search",
            "description": "Search term to filter permissions by name, display_name, or description\nUses case-insensitive partial matching",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "all",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Permissions"
        ]
      },
      "post": {
        "summary": "Create a new permission",
        "description": "Create a new permission in the system with resource and action definitions.",
        "operationId": "OpenAuth_CreatePermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Permission"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePermissionRequest"
            }
          }
        ],
        "tags": [
          "Permissions"
        ]
      }
    },
    "/openauth/v1/permissions/{id}": {
      "get": {
        "summary": "Get a permission by ID",
        "description": "Retrieve a specific permission by its unique ID.",
        "operationId": "OpenAuth_GetPermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Permission"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the permission to retrieve",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Permissions"
        ]
      },
      "delete": {
        "summary": "Delete a permission",
        "description": "Remove a permission from the system.",
        "operationId": "OpenAuth_DeletePermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeletePermissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the permission to delete\nNote: System permissions cannot be deleted",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Permissions"
        ]
      },
      "put": {
        "summary": "Update a permission",
        "description": "Modify an existing permission's details.",
        "operationId": "OpenAuth_UpdatePermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Permission"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the permission to update",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthUpdatePermissionBody"
            }
          }
        ],
        "tags": [
          "Permissions"
        ]
      }
    },
    "/openauth/v1/ping": {
      "get": {
        "summary": "Ping the server",
        "description": "Check if the server is alive.",
        "operationId": "OpenAuth_Ping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "message",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Ping"
        ]
      }
    },
    "/openauth/v1/profiles/{profileUuid}": {
      "delete": {
        "summary": "Delete a profile",
        "description": "Remove a specific profile.",
        "operationId": "OpenAuth_DeleteProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "profileUuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Profile Management"
        ]
      },
      "put": {
        "summary": "Update a profile",
        "description": "Modify an existing profile.",
        "operationId": "OpenAuth_UpdateProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "profileUuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthUpdateProfileBody"
            }
          }
        ],
        "tags": [
          "Profile Management"
        ]
      }
    },
    "/openauth/v1/sessions/terminate": {
      "put": {
        "summary": "Terminate user session",
        "description": "End a specific user session.",
        "operationId": "OpenAuth_TerminateSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TerminateSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "TerminateSessionRequest to end specific session\nIf user_id is provided, terminate all sessions for the user and keep the specified session\nIf user_id is not provided then, terminate session provided.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TerminateSessionRequest"
            }
          }
        ],
        "tags": [
          "Session Management"
        ]
      }
    },
    "/openauth/v1/stats": {
      "get": {
        "summary": "Get system statistics",
        "description": "Retrieve system statistics including user counts, permission counts, group counts, and other metrics.",
        "operationId": "OpenAuth_Stats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StatsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Statistics"
        ]
      }
    },
    "/openauth/v1/users": {
      "get": {
        "summary": "List users",
        "description": "Retrieve users with filtering, sorting, and pagination.",
        "operationId": "OpenAuth_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User Management"
        ]
      }
    },
    "/openauth/v1/users/check-email/{email}": {
      "get": {
        "summary": "Check email availability",
        "description": "Check if an email address is available for registration.",
        "operationId": "OpenAuth_CheckEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Registration"
        ]
      }
    },
    "/openauth/v1/users/check-username/{username}": {
      "get": {
        "summary": "Check username availability",
        "description": "Check if a username is available for registration.",
        "operationId": "OpenAuth_CheckUsername",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckUsernameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Registration"
        ]
      }
    },
    "/openauth/v1/users/send-verification-code": {
      "post": {
        "summary": "Send verification code",
        "description": "Send verification codes for email or phone.",
        "operationId": "OpenAuth_SendVerificationCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SendVerificationCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendVerificationCodeRequest"
            }
          }
        ],
        "tags": [
          "User Registration"
        ]
      }
    },
    "/openauth/v1/users/signup": {
      "post": {
        "summary": "Sign up a new user",
        "description": "Create a new user account in the system.",
        "operationId": "OpenAuth_SignUp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SignUpResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SignUpRequest"
            }
          }
        ],
        "tags": [
          "User Registration"
        ]
      }
    },
    "/openauth/v1/users/verify-email": {
      "post": {
        "summary": "Verify email address",
        "description": "Verify a user's email address using a verification code.",
        "operationId": "OpenAuth_VerifyEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyEmailRequest"
            }
          }
        ],
        "tags": [
          "User Registration"
        ]
      }
    },
    "/openauth/v1/users/verify-phone": {
      "post": {
        "summary": "Verify phone number",
        "description": "Verify a user's phone number using a verification code.",
        "operationId": "OpenAuth_VerifyPhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyPhoneRequest"
            }
          }
        ],
        "tags": [
          "User Registration"
        ]
      }
    },
    "/openauth/v1/users/{userId}/effective-permissions": {
      "get": {
        "summary": "Get user effective permissions",
        "description": "Retrieve all effective permissions for a user including inherited permissions.",
        "operationId": "OpenAuth_GetUserEffectivePermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserEffectivePermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "ID of the user to get effective permissions for",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Permission Assignments"
        ]
      }
    },
    "/openauth/v1/users/{userId}/groups": {
      "get": {
        "summary": "List user groups",
        "description": "Retrieve all groups for a specific user.",
        "operationId": "OpenAuth_ListUserGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "all",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Group Users"
        ]
      }
    },
    "/openauth/v1/users/{userId}/permissions": {
      "get": {
        "summary": "List user permissions",
        "description": "Retrieve all permissions directly assigned to a user.",
        "operationId": "OpenAuth_ListUserPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "ID of the user to list permissions for",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Permission Assignments"
        ]
      },
      "post": {
        "summary": "Assign permissions to user",
        "description": "Assign permissions directly to a user.",
        "operationId": "OpenAuth_AssignPermissionsToUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AssignPermissionsToUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "ID of the user to assign the permission to",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthAssignPermissionsToUserBody"
            }
          }
        ],
        "tags": [
          "Permission Assignments"
        ]
      },
      "put": {
        "summary": "Remove permissions from user",
        "description": "Remove permissions directly assigned to a user.",
        "operationId": "OpenAuth_RemovePermissionsFromUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemovePermissionsFromUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "ID of the user to remove the permission from",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthRemovePermissionsFromUserBody"
            }
          }
        ],
        "tags": [
          "Permission Assignments"
        ]
      }
    },
    "/openauth/v1/users/{userId}/profiles": {
      "post": {
        "summary": "Create a new profile",
        "description": "Create a new profile for a user.",
        "operationId": "OpenAuth_CreateProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthCreateProfileBody"
            }
          }
        ],
        "tags": [
          "Profile Management"
        ]
      }
    },
    "/openauth/v1/users/{userUuid}/profiles": {
      "get": {
        "summary": "List user profiles",
        "description": "Retrieve all profiles for a specific user.",
        "operationId": "OpenAuth_ListUserProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserProfilesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userUuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Profile Management"
        ]
      }
    },
    "/openauth/v1/users/{userUuid}/sessions": {
      "get": {
        "summary": "List user sessions",
        "description": "Retrieve active sessions for a user.",
        "operationId": "OpenAuth_ListUserSessions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserSessionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userUuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Session Management"
        ]
      }
    },
    "/openauth/v1/users/{uuid}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieve user information by ID, UUID, username, or email.",
        "operationId": "OpenAuth_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "includeProfile",
            "description": "Whether to include profile information",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "User Management"
        ]
      },
      "delete": {
        "summary": "Delete user account",
        "description": "Remove or deactivate a user account.",
        "operationId": "OpenAuth_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "softDelete",
            "description": "If true, just deactivate; if false, hard delete",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "User Management"
        ]
      },
      "put": {
        "summary": "Update user information",
        "description": "Modify user account and profile information.",
        "operationId": "OpenAuth_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthUpdateUserBody"
            }
          }
        ],
        "tags": [
          "User Management"
        ]
      }
    },
    "/openauth/v1/users/{uuid}/change-password": {
      "post": {
        "summary": "Change user password",
        "description": "Allow users to change their password.",
        "operationId": "OpenAuth_ChangePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ChangePasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthChangePasswordBody"
            }
          }
        ],
        "tags": [
          "User Management"
        ]
      }
    }
  },
  "definitions": {
    "OpenAuthAssignPermissionsToGroupBody": {
      "type": "object",
      "properties": {
        "permissionsIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "IDs of the permissions to assign"
        }
      },
      "title": "Request to assign a permission to a group"
    },
    "OpenAuthAssignPermissionsToUserBody": {
      "type": "object",
      "properties": {
        "permissionsIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "IDs of the permissions to assign"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Optional expiration timestamp (null means no expiration)"
        }
      },
      "title": "Request to assign a permission directly to a user"
    },
    "OpenAuthAssignUsersToGroupBody": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Optional expiration time for the group membership"
        }
      },
      "title": "AssignUsersToGroupRequest to add users to a group"
    },
    "OpenAuthChangePasswordBody": {
      "type": "object",
      "properties": {
        "currentPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      },
      "title": "ChangePasswordRequest to change user password"
    },
    "OpenAuthCreateProfileBody": {
      "type": "object",
      "properties": {
        "profileName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "title": "yyyy-mm-dd"
        },
        "gender": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "websiteUrl": {
          "type": "string"
        },
        "metadata": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "CreateProfileRequest to create a new profile for a user"
    },
    "OpenAuthGetConfigsByKeysBody": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of configuration keys to retrieve"
        }
      },
      "title": "Request to get multiple configs by keys within an entity"
    },
    "OpenAuthRemovePermissionsFromGroupBody": {
      "type": "object",
      "properties": {
        "permissionsIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "IDs of the permissions to remove"
        }
      },
      "title": "Request to remove a permission from a group"
    },
    "OpenAuthRemovePermissionsFromUserBody": {
      "type": "object",
      "properties": {
        "permissionsIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "IDs of the permissions to remove"
        }
      },
      "title": "Request to remove a permission from a user"
    },
    "OpenAuthRemoveUsersFromGroupBody": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      },
      "title": "RemoveUsersFromGroupRequest to remove users from a group"
    },
    "OpenAuthUpdateConfigBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "title": "New display name (optional)"
        },
        "description": {
          "type": "string",
          "title": "New description (optional)"
        },
        "stringValue": {
          "type": "string"
        },
        "intValue": {
          "type": "string",
          "format": "int64"
        },
        "floatValue": {
          "type": "number",
          "format": "double"
        },
        "boolValue": {
          "type": "boolean"
        },
        "jsonValue": {
          "type": "string",
          "title": "For complex JSON objects"
        },
        "metadata": {
          "type": "string",
          "title": "New metadata (optional)"
        }
      },
      "title": "Request to update an existing config"
    },
    "OpenAuthUpdateConfigEntityBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "New name (optional)"
        },
        "displayName": {
          "type": "string",
          "title": "New display name (optional)"
        },
        "description": {
          "type": "string",
          "title": "New description (optional)"
        },
        "readPerm": {
          "type": "string",
          "title": "New read permission ID (optional)"
        },
        "writePerm": {
          "type": "string",
          "title": "New write permission ID (optional)"
        }
      },
      "title": "Request to update an existing config entity"
    },
    "OpenAuthUpdateGroupBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Optional new name for the group"
        },
        "displayName": {
          "type": "string",
          "title": "Optional new display name"
        },
        "description": {
          "type": "string",
          "title": "Optional new description"
        }
      },
      "title": "UpdateGroupRequest to update group information"
    },
    "OpenAuthUpdatePermissionBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "New name for the permission (optional)\nMust be unique if provided"
        },
        "displayName": {
          "type": "string",
          "title": "New display name for the permission (optional)"
        },
        "description": {
          "type": "string",
          "title": "New description for the permission (optional)\nSet to empty string to clear existing description"
        }
      },
      "title": "Request to update an existing permission"
    },
    "OpenAuthUpdateProfileBody": {
      "type": "object",
      "properties": {
        "profileName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "title": "yyyy-mm-dd"
        },
        "gender": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "websiteUrl": {
          "type": "string"
        },
        "metadata": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "UpdateProfileRequest to update a specific profile"
    },
    "OpenAuthUpdateUserBody": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        }
      },
      "title": "UpdateUserRequest to update user information"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AssignPermissionsToGroupResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "title": "Response after assigning a permission to a group"
    },
    "v1AssignPermissionsToUserResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "title": "Response after assigning a permission to a user"
    },
    "v1AssignUsersToGroupResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "AssignUsersToGroupResponse"
    },
    "v1ChangePasswordResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "ChangePasswordResponse"
    },
    "v1CheckEmailResponse": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "CheckEmailResponse"
    },
    "v1CheckUsernameResponse": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "suggestions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Alternative username suggestions if not available"
        }
      },
      "title": "CheckUsernameResponse"
    },
    "v1Config": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier for the config"
        },
        "entityId": {
          "type": "string",
          "format": "int64",
          "title": "ID of the parent config entity"
        },
        "key": {
          "type": "string",
          "title": "Configuration key (unique within entity)"
        },
        "displayName": {
          "type": "string",
          "title": "Human-readable display name"
        },
        "description": {
          "type": "string",
          "title": "Optional description explaining this configuration"
        },
        "stringValue": {
          "type": "string"
        },
        "intValue": {
          "type": "string",
          "format": "int64"
        },
        "floatValue": {
          "type": "number",
          "format": "double"
        },
        "boolValue": {
          "type": "boolean"
        },
        "jsonValue": {
          "type": "string",
          "title": "For complex JSON objects"
        },
        "type": {
          "$ref": "#/definitions/v1ValueType",
          "title": "Type of the configuration value"
        },
        "metadata": {
          "type": "string",
          "title": "Additional metadata as JSON"
        },
        "createdBy": {
          "type": "string",
          "format": "int64",
          "title": "User ID who created this config"
        },
        "updatedBy": {
          "type": "string",
          "format": "int64",
          "title": "User ID who last updated this config"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp when the config was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp when the config was last updated"
        },
        "isSystem": {
          "type": "boolean",
          "title": "Flag indicating if this config is a system config"
        }
      },
      "title": "Config represents a single configuration key-value pair within an entity"
    },
    "v1ConfigEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier for the config entity"
        },
        "name": {
          "type": "string",
          "title": "Unique name for the entity (e.g., \"database\", \"auth\", \"payment\")"
        },
        "displayName": {
          "type": "string",
          "title": "Human-readable display name"
        },
        "description": {
          "type": "string",
          "title": "Optional description explaining the purpose of this entity"
        },
        "readPerm": {
          "type": "string",
          "title": "Permission ID required to read configs from this entity"
        },
        "writePerm": {
          "type": "string",
          "title": "Permission ID required to write/modify configs in this entity"
        },
        "createdBy": {
          "type": "string",
          "format": "int64",
          "title": "User ID who created this entity"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp when the entity was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp when the entity was last updated"
        },
        "isSystem": {
          "type": "boolean",
          "title": "Flag indicating if this entity is a system entity"
        }
      },
      "title": "ConfigEntity represents a configuration entity that groups related configs"
    },
    "v1CreateConfigEntityRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Unique name for the entity"
        },
        "displayName": {
          "type": "string",
          "title": "Human-readable display name"
        },
        "description": {
          "type": "string",
          "title": "description"
        },
        "readPerm": {
          "type": "string",
          "title": "Permission ID required to read configs from this entity"
        },
        "writePerm": {
          "type": "string",
          "title": "Permission ID required to write/modify configs in this entity"
        }
      },
      "title": "Request to create a new config entity"
    },
    "v1CreateConfigRequest": {
      "type": "object",
      "properties": {
        "entityId": {
          "type": "string",
          "format": "int64",
          "title": "ID of the parent config entity"
        },
        "key": {
          "type": "string",
          "title": "Configuration key (unique within entity)"
        },
        "displayName": {
          "type": "string",
          "title": "Human-readable display name"
        },
        "description": {
          "type": "string",
          "title": "Optional description"
        },
        "stringValue": {
          "type": "string"
        },
        "intValue": {
          "type": "string",
          "format": "int64"
        },
        "floatValue": {
          "type": "number",
          "format": "double"
        },
        "boolValue": {
          "type": "boolean"
        },
        "jsonValue": {
          "type": "string",
          "title": "For complex JSON objects"
        },
        "type": {
          "$ref": "#/definitions/v1ValueType",
          "title": "Type of the configuration value"
        },
        "metadata": {
          "type": "string",
          "title": "Additional metadata"
        }
      },
      "title": "Request to create a new config"
    },
    "v1CreateGroupRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Unique name for the group"
        },
        "displayName": {
          "type": "string",
          "title": "Human-readable display name for the group"
        },
        "description": {
          "type": "string",
          "title": "Optional detailed description of the group"
        },
        "isDefault": {
          "type": "boolean"
        }
      },
      "title": "CreateGroupRequest to create a new group"
    },
    "v1CreateGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "CreateGroupResponse after successful group creation"
    },
    "v1CreatePermissionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Unique name for the permission, typically in format \"resource.action\"\nMust be unique across all permissions\nExamples: \"users.create\", \"orders.approve\", \"reports.export\""
        },
        "displayName": {
          "type": "string",
          "title": "Human-readable display name\nExamples: \"Create Users\", \"Approve Orders\", \"Export Reports\""
        },
        "description": {
          "type": "string",
          "title": "Optional detailed description explaining what this permission allows"
        }
      },
      "title": "Request to create a new permission"
    },
    "v1CreateProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/v1UserProfile"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "CreateProfileResponse"
    },
    "v1DeleteGroupResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "DeleteGroupResponse"
    },
    "v1DeletePermissionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "Whether the deletion was successful"
        },
        "message": {
          "type": "string",
          "title": "Human-readable message about the deletion result"
        }
      },
      "title": "Response confirming permission deletion"
    },
    "v1DeleteProfileResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "DeleteProfileResponse"
    },
    "v1DeleteResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "Whether the operation was successful"
        },
        "message": {
          "type": "string",
          "title": "Optional message"
        }
      },
      "title": "Generic response for delete operations"
    },
    "v1DeleteUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "DeleteUserResponse"
    },
    "v1EffectivePermission": {
      "type": "object",
      "properties": {
        "permissionId": {
          "type": "string",
          "format": "int64",
          "title": "Permission details"
        },
        "permissionName": {
          "type": "string"
        },
        "permissionDisplayName": {
          "type": "string"
        },
        "permissionDescription": {
          "type": "string"
        },
        "source": {
          "type": "string",
          "title": "Source of the permission: \"direct\" or \"group\""
        },
        "groupId": {
          "type": "string",
          "format": "int64",
          "title": "If source is \"group\", this contains the group details"
        },
        "groupName": {
          "type": "string"
        },
        "groupDisplayName": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "If source is \"direct\", this may contain expiration info"
        },
        "grantedAt": {
          "type": "string",
          "format": "int64",
          "title": "When this permission was granted"
        },
        "grantedBy": {
          "type": "string",
          "format": "int64",
          "title": "Who granted this permission"
        }
      },
      "title": "EffectivePermission represents a permission that a user has either directly or through group membership"
    },
    "v1GetConfigsByKeysResponse": {
      "type": "object",
      "properties": {
        "configs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Config"
          },
          "title": "Map of key to config"
        }
      },
      "title": "Response containing multiple configs"
    },
    "v1GetGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group"
        }
      },
      "title": "GetGroupResponse"
    },
    "v1GetUserEffectivePermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EffectivePermission"
          },
          "title": "Array of effective permissions for the user"
        }
      },
      "title": "Response containing effective permissions for a user"
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        },
        "profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserProfile"
          }
        }
      },
      "title": "GetUserResponse"
    },
    "v1Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier for the group"
        },
        "name": {
          "type": "string",
          "title": "Unique name for the group"
        },
        "displayName": {
          "type": "string",
          "title": "Human-readable display name for the group"
        },
        "description": {
          "type": "string",
          "title": "Optional detailed description of the group"
        },
        "createdBy": {
          "type": "string",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp when the group was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp when the group was last updated"
        },
        "isSystem": {
          "type": "boolean",
          "title": "Whether this is a system group (cannot be modified/deleted)"
        }
      },
      "title": "Group represents a group/role in the system for organizing users and permissions"
    },
    "v1GroupUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "int64"
        },
        "userUuid": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "assignedAt": {
          "type": "string",
          "format": "int64"
        },
        "assignedBy": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "GroupUser represents a user's membership in a group"
    },
    "v1ListConfigEntitiesResponse": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConfigEntity"
          },
          "title": "Array of config entities matching the request criteria"
        }
      },
      "title": "Response containing a list of config entities"
    },
    "v1ListConfigsResponse": {
      "type": "object",
      "properties": {
        "configs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Config"
          },
          "title": "Array of configs matching the request criteria"
        },
        "total": {
          "type": "string",
          "format": "int64",
          "title": "Total number of configs (for pagination)"
        }
      },
      "title": "Response containing a list of configs"
    },
    "v1ListGroupPermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EffectivePermission"
          },
          "title": "Array of permissions assigned to the group"
        }
      },
      "title": "Response containing group permissions"
    },
    "v1ListGroupUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupUser"
          }
        }
      },
      "title": "ListGroupUsersResponse"
    },
    "v1ListGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Group"
          }
        }
      },
      "title": "ListGroupsResponse"
    },
    "v1ListPermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Permission"
          },
          "title": "Array of permissions matching the request criteria"
        }
      },
      "title": "Response containing a list of permissions with pagination metadata"
    },
    "v1ListUserGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserGroup"
          }
        }
      },
      "title": "ListUserGroupsResponse"
    },
    "v1ListUserPermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EffectivePermission"
          },
          "title": "Array of permissions assigned to the user"
        }
      },
      "title": "Response containing user permissions"
    },
    "v1ListUserProfilesResponse": {
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserProfile"
          }
        }
      },
      "title": "ListUserProfilesResponse"
    },
    "v1ListUserSessionsResponse": {
      "type": "object",
      "properties": {
        "sessions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Session"
          }
        }
      },
      "title": "ListUserSessionsResponse"
    },
    "v1ListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1User"
          }
        }
      },
      "title": "ListUsersResponse"
    },
    "v1LogoutRequest": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string",
          "title": "Specific session to logout"
        },
        "allSessions": {
          "type": "boolean",
          "title": "Logout from all devices"
        }
      },
      "title": "LogoutRequest to end user session"
    },
    "v1LogoutResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "sessionsTerminated": {
          "type": "integer",
          "format": "int32",
          "title": "Number of sessions ended"
        }
      },
      "title": "LogoutResponse"
    },
    "v1Permission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier for the permission"
        },
        "name": {
          "type": "string",
          "title": "Unique name for the permission, typically in format \"resource.action\"\nExamples: \"users.create\", \"permissions.delete\", \"groups.read\""
        },
        "displayName": {
          "type": "string",
          "title": "Human-readable display name for the permission\nExamples: \"Create Users\", \"Delete Permissions\", \"View Groups\""
        },
        "description": {
          "type": "string",
          "title": "Optional detailed description of what this permission allows"
        },
        "createdBy": {
          "type": "string",
          "format": "int64",
          "title": "Whether this is a system permission (cannot be modified/deleted)\nSystem permissions are critical for application functionality"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp when the permission was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp when the permission was last updated"
        },
        "isSystem": {
          "type": "boolean",
          "title": "Whether this is a system permission (cannot be modified/deleted)"
        }
      },
      "description": "Permission represents a specific authorization rule in the system.\nIt follows a Resource-Based Access Control (RBAC) pattern where permissions\nare defined by combining a resource (what) with an action (how).\n\nExample: A permission with resource=\"users\" and action=\"create\" allows\ncreating new user accounts."
    },
    "v1PingResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "description": "PingResponse is the response message for the Ping RPC method."
    },
    "v1RefreshTokenRequest": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string"
        },
        "deviceId": {
          "type": "string"
        },
        "profiles": {
          "type": "boolean"
        },
        "includePermissions": {
          "type": "boolean"
        }
      },
      "title": "RefreshTokenRequest to refresh access token"
    },
    "v1RefreshTokenResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string",
          "title": "New refresh token (rotation)"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "refreshExpiresAt": {
          "type": "string",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "RefreshTokenResponse with new tokens"
    },
    "v1RemovePermissionsFromGroupResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "Response after removing a permission from a group"
    },
    "v1RemovePermissionsFromUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "Response after removing a permission from a user"
    },
    "v1RemoveUsersFromGroupResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "RemoveUsersFromGroupResponse"
    },
    "v1SendVerificationCodeRequest": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "title": "email or phone - determined by backend"
        }
      },
      "title": "SendVerificationCodeRequest to resend verification codes"
    },
    "v1SendVerificationCodeResponse": {
      "type": "object",
      "properties": {
        "sent": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "When the code expires"
        },
        "resendAfter": {
          "type": "string",
          "format": "int64",
          "title": "When the user can request another code (Unix timestamp milliseconds)"
        },
        "id": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "SendVerificationCodeResponse"
    },
    "v1Session": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Session UUID"
        },
        "userId": {
          "type": "string",
          "title": "User UUID"
        },
        "deviceId": {
          "type": "string"
        },
        "deviceName": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "userAgent": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "lastActivityAt": {
          "type": "string",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Session information"
    },
    "v1SignInMetadata": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string",
          "title": "Unique device identifier"
        },
        "deviceName": {
          "type": "string",
          "title": "Human-readable device name"
        },
        "deviceType": {
          "type": "string",
          "title": "web, mobile, desktop, tablet"
        },
        "lat": {
          "type": "number",
          "format": "double"
        },
        "long": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "v1SignInRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "otp": {
          "type": "string"
        },
        "rememberMe": {
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/v1SignInMetadata"
        },
        "profiles": {
          "type": "boolean"
        },
        "includePermissions": {
          "type": "boolean"
        },
        "verificationId": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "SignInRequest for user authentication"
    },
    "v1SignInResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Access token expiration (Unix timestamp)"
        },
        "refreshExpiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Refresh token expiration (Unix timestamp)"
        },
        "user": {
          "$ref": "#/definitions/v1User"
        },
        "sessionId": {
          "type": "string",
          "title": "Session UUID for tracking"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "SignInResponse with authentication tokens and user data"
    },
    "v1SignUpRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "SignUpRequest for user registration - only authentication credentials"
    },
    "v1SignUpResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        },
        "message": {
          "type": "string"
        },
        "emailVerificationRequired": {
          "type": "boolean"
        },
        "phoneVerificationRequired": {
          "type": "boolean"
        }
      },
      "title": "SignUpResponse after successful registration - only user data"
    },
    "v1StatsResponse": {
      "type": "object",
      "properties": {
        "totalUsers": {
          "type": "string",
          "format": "int64",
          "title": "Total number of users in the system"
        },
        "totalPermissions": {
          "type": "string",
          "format": "int64",
          "title": "Total number of permissions in the system"
        },
        "totalGroups": {
          "type": "string",
          "format": "int64",
          "title": "Total number of groups in the system"
        },
        "activeUsers": {
          "type": "string",
          "format": "int64",
          "title": "Number of currently active users (users with active sessions)"
        }
      },
      "title": "StatsResponse contains system statistics"
    },
    "v1TerminateSessionRequest": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "title": "if user_id is provided, terminate all sessions for the user and keep the specified session"
        }
      },
      "description": "TerminateSessionRequest to end specific session\nIf user_id is provided, terminate all sessions for the user and keep the specified session\nIf user_id is not provided then, terminate session provided."
    },
    "v1TerminateSessionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "TerminateSessionResponse"
    },
    "v1UpdateGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "UpdateGroupResponse"
    },
    "v1UpdateProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/v1UserProfile"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "UpdateProfileResponse"
    },
    "v1UpdateResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1UpdateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        }
      },
      "title": "UpdateUserResponse"
    },
    "v1User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "uuid": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "Display name for the user"
        },
        "avatarUrl": {
          "type": "string",
          "title": "URL to user's avatar image"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "phoneVerified": {
          "type": "boolean"
        },
        "deactivated": {
          "type": "boolean"
        },
        "isActive": {
          "type": "boolean"
        },
        "isLocked": {
          "type": "boolean"
        },
        "failedLoginAttempts": {
          "type": "integer",
          "format": "int32"
        },
        "lastLoginAt": {
          "type": "string",
          "format": "int64"
        },
        "passwordChangedAt": {
          "type": "string",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "int64"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "User represents a user account in the system"
    },
    "v1UserGroup": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string",
          "format": "int64"
        },
        "groupName": {
          "type": "string"
        },
        "groupDisplayName": {
          "type": "string"
        },
        "groupDescription": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "isDefault": {
          "type": "boolean"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "assignedAt": {
          "type": "string",
          "format": "int64"
        },
        "assignedBy": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "UserGroup represents a group membership for a user"
    },
    "v1UserProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "uuid": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "format": "int64"
        },
        "profileName": {
          "type": "string",
          "title": "Name/label for this profile"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "title": "yyyy-mm-dd"
        },
        "gender": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "websiteUrl": {
          "type": "string"
        },
        "metadata": {
          "type": "string",
          "format": "byte",
          "title": "JSON metadata"
        },
        "createdAt": {
          "type": "string",
          "format": "int64"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "UserProfile represents extended user profile information"
    },
    "v1ValidateTokenRequest": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        }
      },
      "title": "ValidateTokenRequest to check token validity"
    },
    "v1ValidateTokenResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/v1User",
          "title": "User info if token is valid"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Token expiration"
        }
      },
      "title": "ValidateTokenResponse"
    },
    "v1ValueType": {
      "type": "string",
      "enum": [
        "VALUE_TYPE_UNSPECIFIED",
        "VALUE_TYPE_STRING",
        "VALUE_TYPE_INT",
        "VALUE_TYPE_FLOAT",
        "VALUE_TYPE_BOOL",
        "VALUE_TYPE_JSON"
      ],
      "default": "VALUE_TYPE_UNSPECIFIED"
    },
    "v1VerificationResponse": {
      "type": "object",
      "properties": {
        "verified": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "VerificationResponse for verification operations"
    },
    "v1VerifyEmailRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "verificationCode": {
          "type": "string"
        }
      },
      "title": "VerifyEmailRequest for email verification"
    },
    "v1VerifyPhoneRequest": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string"
        },
        "verificationCode": {
          "type": "string"
        }
      },
      "title": "VerifyPhoneRequest for phone verification"
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "description": "Bearer token for authentication. Format: 'Bearer \u003ctoken\u003e'",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
