{
  "swagger": "2.0",
  "info": {
    "title": "proto/openauth/v1/openauth.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "OpenAuth"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/openauth/v1/auth/logout": {
      "post": {
        "summary": "Logout terminates user session(s).",
        "description": "Can logout from current session or all sessions across devices.\nInvalidates tokens and cleans up session data.",
        "operationId": "OpenAuth_Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LogoutResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LogoutRequest"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/auth/refresh": {
      "post": {
        "summary": "RefreshToken generates new access token using refresh token.",
        "description": "Implements token rotation for enhanced security where each refresh\ngenerates a new refresh token and invalidates the old one.",
        "operationId": "OpenAuth_RefreshToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RefreshTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RefreshTokenRequest"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/auth/signin": {
      "post": {
        "summary": "SignIn authenticates a user and creates a new session.",
        "description": "Supports multiple login methods:\n- Username + password\n- Email + password  \n- Phone + password\n\nReturns access token, refresh token, and user information.\nTracks device information and manages session security.",
        "operationId": "OpenAuth_SignIn",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SignInResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SignInRequest"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/auth/validate": {
      "post": {
        "summary": "ValidateToken checks if an access token is valid and active.",
        "description": "Used for authentication middleware and token verification.\nReturns user information if token is valid.",
        "operationId": "OpenAuth_ValidateToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ValidateTokenRequest"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/groups": {
      "get": {
        "summary": "ListGroups retrieves groups with optional filtering and pagination.",
        "description": "Supports filtering by:\n- search: Searches across name, display_name, and description fields\n- is_system: Filter by system vs user-created groups\n- is_default: Filter by default groups for new users",
        "operationId": "OpenAuth_ListGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Maximum number of groups to return (default: 10, max: 100)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "description": "Number of groups to skip (for pagination)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "search",
            "description": "Optional search query (searches name, display_name, description)",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      },
      "post": {
        "summary": "CreateGroup creates a new group in the system.",
        "description": "Groups are used to organize users and assign permissions collectively.\nEach group has a unique name and can have multiple users and permissions assigned.",
        "operationId": "OpenAuth_CreateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateGroupRequest"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/groups/users": {
      "post": {
        "summary": "AssignUserToGroup adds a user to a group.",
        "description": "Grants the user all permissions associated with the group.\nSupports optional expiration time for temporary group membership.",
        "operationId": "OpenAuth_AssignUserToGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AssignUserToGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AssignUserToGroupRequest"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/groups/{groupId}/users": {
      "get": {
        "summary": "ListGroupUsers retrieves all users in a specific group.",
        "description": "Returns paginated list of users with their group membership details.",
        "operationId": "OpenAuth_ListGroupUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListGroupUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "Pagination",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/groups/{groupId}/users/{userId}": {
      "delete": {
        "summary": "RemoveUserFromGroup removes a user from a group.",
        "description": "Revokes all group-based permissions from the user.\nDirect user permissions are not affected.",
        "operationId": "OpenAuth_RemoveUserFromGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveUserFromGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/groups/{id}": {
      "get": {
        "summary": "GetGroup retrieves a specific group by ID, UUID, or name.",
        "description": "Returns complete group information including metadata and system status.",
        "operationId": "OpenAuth_GetGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      },
      "delete": {
        "summary": "DeleteGroup removes a group from the system.",
        "description": "System groups (is_system=true) cannot be deleted as they are critical for application functionality.\nWarning: Deleting a group will remove all user assignments and group permissions.",
        "operationId": "OpenAuth_DeleteGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      },
      "put": {
        "summary": "UpdateGroup modifies an existing group.",
        "description": "All fields in the request are optional - only provided fields will be updated.\nSystem groups (is_system=true) cannot be modified to prevent breaking core functionality.",
        "operationId": "OpenAuth_UpdateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthUpdateGroupBody"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/permissions": {
      "get": {
        "summary": "ListPermissions retrieves permissions with optional filtering and pagination.",
        "description": "Supports filtering by:\n- search: Searches across name, display_name, and description fields\n- resource: Filter by specific resource type (e.g., \"users\", \"groups\")\n- action: Filter by specific action type (e.g., \"create\", \"read\")\n- is_system: Filter by system vs user-created permissions\n\nPagination is handled via limit/offset parameters:\n- limit: Maximum number of results (default: 10, max: 100)\n- offset: Number of results to skip (default: 0)\n\nExample queries:\n- GET /openauth/v1/permissions?resource=users - All user-related permissions\n- GET /openauth/v1/permissions?action=create - All creation permissions\n- GET /openauth/v1/permissions?search=user\u0026limit=20 - Search for \"user\" with 20 results",
        "operationId": "OpenAuth_ListPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Maximum number of permissions to return (default: 10, max: 100)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "description": "Number of permissions to skip for pagination (default: 0)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "search",
            "description": "Search term to filter permissions by name, display_name, or description\nUses case-insensitive partial matching",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      },
      "post": {
        "summary": "CreatePermission creates a new permission in the system.",
        "description": "Permissions follow the pattern: resource.action (e.g., \"users.create\")\n- resource: The entity being accessed (users, groups, permissions, etc.)\n- action: The operation being performed (create, read, update, delete, etc.)\n\nExample: Creating a permission for user management would have:\n- name: \"users.create\"\n- resource: \"users\" \n- action: \"create\"\n- display_name: \"Create Users\"",
        "operationId": "OpenAuth_CreatePermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Permission"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePermissionRequest"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/permissions/{id}": {
      "get": {
        "summary": "GetPermission retrieves a specific permission by its unique ID.",
        "description": "Returns the complete permission details including resource, action,\nsystem status, and metadata.",
        "operationId": "OpenAuth_GetPermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Permission"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the permission to retrieve",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      },
      "delete": {
        "summary": "DeletePermission removes a permission from the system.",
        "description": "System permissions (is_system=true) cannot be deleted as they are\ncritical for application functionality. Attempting to delete a system\npermission will return a PermissionDenied error.\n\nWarning: Deleting a permission will affect all users and groups\nthat currently have this permission assigned.",
        "operationId": "OpenAuth_DeletePermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeletePermissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the permission to delete\nNote: System permissions cannot be deleted",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      },
      "put": {
        "summary": "UpdatePermission modifies an existing permission.",
        "description": "All fields in the request are optional - only provided fields will be updated.\nSystem permissions (is_system=true) cannot be modified to prevent\nbreaking core application functionality.\n\nNote: Changing the name requires ensuring uniqueness across all permissions.",
        "operationId": "OpenAuth_UpdatePermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Permission"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the permission to update",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthUpdatePermissionBody"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/ping": {
      "get": {
        "summary": "Ping is a simple health check endpoint to verify service availability",
        "operationId": "OpenAuth_Ping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "message",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/profiles/{profileUuid}": {
      "delete": {
        "summary": "DeleteProfile removes a specific profile.",
        "description": "Permanently deletes a profile and all associated data.\nUsers must have at least one profile, so deletion of the last\nprofile may be restricted based on business rules.",
        "operationId": "OpenAuth_DeleteProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "profileUuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      },
      "put": {
        "summary": "UpdateProfile modifies an existing profile.",
        "description": "Supports partial updates - only provided fields are modified.\nProfile updates are independent of user account information.",
        "operationId": "OpenAuth_UpdateProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "profileUuid",
            "description": "UUID of the profile to update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthUpdateProfileBody"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/sessions/{sessionId}": {
      "delete": {
        "summary": "TerminateSession ends a specific user session.",
        "description": "Allows users to logout from specific devices remotely.\nUseful for security when a device is lost or compromised.",
        "operationId": "OpenAuth_TerminateSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TerminateSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/users": {
      "get": {
        "summary": "ListUsers retrieves users with filtering, sorting, and pagination.",
        "description": "Supports filtering by:\n- search: Search across username, email, and name fields\n- is_active: Filter by account status\n- email_verified/phone_verified: Filter by verification status\n\nRequires appropriate permissions to access user listings.",
        "operationId": "OpenAuth_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "search",
            "description": "Search in username, email, first_name, last_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isActive",
            "description": "Filter by active status",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "emailVerified",
            "description": "Filter by email verification status",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "phoneVerified",
            "description": "Filter by phone verification status",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortBy",
            "description": "Sort by field (username, email, created_at, etc.)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "description": "asc or desc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NONE",
              "ASC",
              "DESC"
            ],
            "default": "NONE"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/users/check-email/{email}": {
      "get": {
        "summary": "CheckEmail checks if an email address is available for registration.",
        "description": "Returns availability status for the email address. Used to prevent\nduplicate registrations and provide user feedback during signup.",
        "operationId": "OpenAuth_CheckEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/users/check-username/{username}": {
      "get": {
        "summary": "CheckUsername checks if a username is available for registration.",
        "description": "Returns availability status and suggestions for alternative usernames\nif the requested username is already taken. Useful for real-time\nusername validation during registration.",
        "operationId": "OpenAuth_CheckUsername",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckUsernameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/users/resend-verification": {
      "post": {
        "summary": "ResendVerification resends verification codes for email or phone.",
        "description": "Useful when users don't receive the initial verification code\nor when the code has expired. Includes rate limiting to prevent abuse.",
        "operationId": "OpenAuth_ResendVerification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SendVerificationCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendVerificationCodeRequest"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/users/signup": {
      "post": {
        "summary": "SignUp creates a new user account in the system.",
        "description": "Supports multiple registration methods:\n- Username + password (required)\n- Email + password (optional, triggers email verification)\n- Phone + password (optional, triggers SMS verification)\n\nReturns the created user and profile information along with\nverification requirements if email/phone was provided.",
        "operationId": "OpenAuth_SignUp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SignUpResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SignUpRequest"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/users/verify-email": {
      "post": {
        "summary": "VerifyEmail verifies a user's email address using a verification code.",
        "description": "The verification code is typically sent via email during registration\nor when requesting email verification. Successful verification\nenables email-based features and login.",
        "operationId": "OpenAuth_VerifyEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyEmailRequest"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/users/verify-phone": {
      "post": {
        "summary": "VerifyPhone verifies a user's phone number using a verification code.",
        "description": "The verification code is typically sent via SMS during registration\nor when requesting phone verification. Successful verification\nenables SMS-based features and login.",
        "operationId": "OpenAuth_VerifyPhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyPhoneRequest"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/users/{userId}/groups": {
      "get": {
        "summary": "ListUserGroups retrieves all groups for a specific user.",
        "description": "Returns paginated list of groups the user belongs to.",
        "operationId": "OpenAuth_ListUserGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "Pagination",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/users/{userUuid}/profiles": {
      "get": {
        "summary": "ListUserProfiles retrieves all profiles for a specific user.",
        "description": "Returns paginated list of profiles belonging to a user.\nUseful for profile selection interfaces and management.",
        "operationId": "OpenAuth_ListUserProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserProfilesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userUuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      },
      "post": {
        "summary": "CreateProfile creates a new profile for a user.",
        "description": "Allows users to create multiple profiles for different contexts.\nEach profile can have different display information, preferences,\nand metadata while belonging to the same user account.",
        "operationId": "OpenAuth_CreateProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userUuid",
            "description": "UUID of the user this profile belongs to",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthCreateProfileBody"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/users/{userUuid}/sessions": {
      "get": {
        "summary": "ListUserSessions retrieves active sessions for a user.",
        "description": "Shows all devices and sessions where the user is logged in.\nUseful for security management and device tracking.",
        "operationId": "OpenAuth_ListUserSessions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserSessionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userUuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/users/{uuid}": {
      "get": {
        "summary": "GetUser retrieves user information by ID, UUID, username, or email.",
        "description": "Supports multiple identifier types and optional profile inclusion.\nAccess control should be enforced based on the requesting user's\npermissions and relationship to the target user.",
        "operationId": "OpenAuth_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "includeProfile",
            "description": "Whether to include profile information",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      },
      "delete": {
        "summary": "DeleteUser removes or deactivates a user account.",
        "description": "Supports both soft delete (deactivation) and hard delete.\nSoft delete preserves data while preventing access.\nHard delete permanently removes the user and all associated data.",
        "operationId": "OpenAuth_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "softDelete",
            "description": "If true, just deactivate; if false, hard delete",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      },
      "put": {
        "summary": "UpdateUser modifies user account and profile information.",
        "description": "Supports partial updates - only provided fields are modified.\nSensitive operations like email/phone changes may require\nadditional verification steps.",
        "operationId": "OpenAuth_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthUpdateUserBody"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    },
    "/openauth/v1/users/{uuid}/change-password": {
      "post": {
        "summary": "ChangePassword allows users to change their password.",
        "description": "Requires the current password for verification and the new password.\nTriggers password change tracking and may invalidate existing sessions.",
        "operationId": "OpenAuth_ChangePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ChangePasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenAuthChangePasswordBody"
            }
          }
        ],
        "tags": [
          "OpenAuth"
        ]
      }
    }
  },
  "definitions": {
    "OpenAuthChangePasswordBody": {
      "type": "object",
      "properties": {
        "currentPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      },
      "title": "ChangePasswordRequest to change user password"
    },
    "OpenAuthCreateProfileBody": {
      "type": "object",
      "properties": {
        "profileName": {
          "type": "string",
          "title": "Name/label for this profile (e.g., \"Personal\", \"Work\", \"Gaming\")"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp"
        },
        "gender": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "websiteUrl": {
          "type": "string"
        },
        "metadata": {
          "type": "string",
          "format": "byte",
          "title": "JSON metadata"
        }
      },
      "title": "CreateProfileRequest to create a new profile for a user"
    },
    "OpenAuthUpdateGroupBody": {
      "type": "object",
      "properties": {
        "newName": {
          "type": "string",
          "title": "Optional new name for the group"
        },
        "displayName": {
          "type": "string",
          "title": "Optional new display name"
        },
        "description": {
          "type": "string",
          "title": "Optional new description"
        }
      },
      "title": "UpdateGroupRequest to update group information"
    },
    "OpenAuthUpdatePermissionBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "New name for the permission (optional)\nMust be unique if provided"
        },
        "displayName": {
          "type": "string",
          "title": "New display name for the permission (optional)"
        },
        "description": {
          "type": "string",
          "title": "New description for the permission (optional)\nSet to empty string to clear existing description"
        }
      },
      "title": "Request to update an existing permission"
    },
    "OpenAuthUpdateProfileBody": {
      "type": "object",
      "properties": {
        "profileName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "int64"
        },
        "gender": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "websiteUrl": {
          "type": "string"
        },
        "metadata": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "UpdateProfileRequest to update a specific profile"
    },
    "OpenAuthUpdateUserBody": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "title": "Display name for the user"
        },
        "avatarUrl": {
          "type": "string",
          "title": "URL to user's avatar image"
        }
      },
      "title": "UpdateUserRequest to update user information"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AssignUserToGroupRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "int64"
        },
        "groupId": {
          "type": "string",
          "format": "int64"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Optional expiration time for the group membership"
        }
      },
      "title": "AssignUserToGroupRequest to add a user to a group"
    },
    "v1AssignUserToGroupResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "AssignUserToGroupResponse"
    },
    "v1ChangePasswordResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "ChangePasswordResponse"
    },
    "v1CheckEmailResponse": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "CheckEmailResponse"
    },
    "v1CheckUsernameResponse": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "suggestions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Alternative username suggestions if not available"
        }
      },
      "title": "CheckUsernameResponse"
    },
    "v1CreateGroupRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Unique name for the group"
        },
        "displayName": {
          "type": "string",
          "title": "Human-readable display name for the group"
        },
        "description": {
          "type": "string",
          "title": "Optional detailed description of the group"
        },
        "isDefault": {
          "type": "boolean"
        }
      },
      "title": "CreateGroupRequest to create a new group"
    },
    "v1CreateGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "CreateGroupResponse after successful group creation"
    },
    "v1CreatePermissionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Unique name for the permission, typically in format \"resource.action\"\nMust be unique across all permissions\nExamples: \"users.create\", \"orders.approve\", \"reports.export\""
        },
        "displayName": {
          "type": "string",
          "title": "Human-readable display name\nExamples: \"Create Users\", \"Approve Orders\", \"Export Reports\""
        },
        "description": {
          "type": "string",
          "title": "Optional detailed description explaining what this permission allows"
        }
      },
      "title": "Request to create a new permission"
    },
    "v1CreateProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/v1UserProfile"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "CreateProfileResponse"
    },
    "v1DeleteGroupResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "DeleteGroupResponse"
    },
    "v1DeletePermissionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "Whether the deletion was successful"
        },
        "message": {
          "type": "string",
          "title": "Human-readable message about the deletion result"
        }
      },
      "title": "Response confirming permission deletion"
    },
    "v1DeleteProfileResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "DeleteProfileResponse"
    },
    "v1DeleteUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "DeleteUserResponse"
    },
    "v1GetGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group"
        }
      },
      "title": "GetGroupResponse"
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        },
        "profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserProfile"
          }
        }
      },
      "title": "GetUserResponse"
    },
    "v1Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier for the group"
        },
        "name": {
          "type": "string",
          "title": "Unique name for the group"
        },
        "displayName": {
          "type": "string",
          "title": "Human-readable display name for the group"
        },
        "description": {
          "type": "string",
          "title": "Optional detailed description of the group"
        },
        "createdBy": {
          "type": "string",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp when the group was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp when the group was last updated"
        }
      },
      "title": "Group represents a group/role in the system for organizing users and permissions"
    },
    "v1GroupUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "format": "int64"
        },
        "userUuid": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "assignedAt": {
          "type": "string",
          "format": "int64"
        },
        "assignedBy": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "GroupUser represents a user's membership in a group"
    },
    "v1ListGroupUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupUser"
          }
        }
      },
      "title": "ListGroupUsersResponse"
    },
    "v1ListGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Group"
          }
        }
      },
      "title": "ListGroupsResponse"
    },
    "v1ListPermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Permission"
          },
          "title": "Array of permissions matching the request criteria"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "title": "The limit value used for this request"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "title": "The offset value used for this request"
        }
      },
      "title": "Response containing a list of permissions with pagination metadata"
    },
    "v1ListUserGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserGroup"
          }
        }
      },
      "title": "ListUserGroupsResponse"
    },
    "v1ListUserProfilesResponse": {
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserProfile"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "hasMore": {
          "type": "boolean"
        }
      },
      "title": "ListUserProfilesResponse"
    },
    "v1ListUserSessionsResponse": {
      "type": "object",
      "properties": {
        "sessions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Session"
          }
        }
      },
      "title": "ListUserSessionsResponse"
    },
    "v1ListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1User"
          }
        }
      },
      "title": "ListUsersResponse"
    },
    "v1LogoutRequest": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string",
          "title": "Specific session to logout"
        },
        "allSessions": {
          "type": "boolean",
          "title": "Logout from all devices"
        }
      },
      "title": "LogoutRequest to end user session"
    },
    "v1LogoutResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "sessionsTerminated": {
          "type": "integer",
          "format": "int32",
          "title": "Number of sessions ended"
        }
      },
      "title": "LogoutResponse"
    },
    "v1Permission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier for the permission"
        },
        "name": {
          "type": "string",
          "title": "Unique name for the permission, typically in format \"resource.action\"\nExamples: \"users.create\", \"permissions.delete\", \"groups.read\""
        },
        "displayName": {
          "type": "string",
          "title": "Human-readable display name for the permission\nExamples: \"Create Users\", \"Delete Permissions\", \"View Groups\""
        },
        "description": {
          "type": "string",
          "title": "Optional detailed description of what this permission allows"
        },
        "createdBy": {
          "type": "string",
          "format": "int64",
          "title": "Whether this is a system permission (cannot be modified/deleted)\nSystem permissions are critical for application functionality"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp when the permission was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp when the permission was last updated"
        }
      },
      "description": "Permission represents a specific authorization rule in the system.\nIt follows a Resource-Based Access Control (RBAC) pattern where permissions\nare defined by combining a resource (what) with an action (how).\n\nExample: A permission with resource=\"users\" and action=\"create\" allows\ncreating new user accounts."
    },
    "v1PingResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "description": "PingResponse is the response message for the Ping RPC method."
    },
    "v1RefreshTokenRequest": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string"
        },
        "deviceId": {
          "type": "string"
        }
      },
      "title": "RefreshTokenRequest to refresh access token"
    },
    "v1RefreshTokenResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string",
          "title": "New refresh token (rotation)"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "refreshExpiresAt": {
          "type": "string",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "RefreshTokenResponse with new tokens"
    },
    "v1RemoveUserFromGroupResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "RemoveUserFromGroupResponse"
    },
    "v1SendVerificationCodeRequest": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "title": "email or phone - determined by backend"
        }
      },
      "title": "SendVerificationCodeRequest to resend verification codes"
    },
    "v1SendVerificationCodeResponse": {
      "type": "object",
      "properties": {
        "sent": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "When the code expires"
        },
        "resendAfter": {
          "type": "string",
          "format": "int64",
          "title": "When the user can request another code (Unix timestamp milliseconds)"
        }
      },
      "title": "SendVerificationCodeResponse"
    },
    "v1Session": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Session UUID"
        },
        "userId": {
          "type": "string",
          "title": "User UUID"
        },
        "deviceId": {
          "type": "string"
        },
        "deviceName": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "userAgent": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "lastActivityAt": {
          "type": "string",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Session information"
    },
    "v1SignInMetadata": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string",
          "title": "Unique device identifier"
        },
        "deviceName": {
          "type": "string",
          "title": "Human-readable device name"
        },
        "deviceType": {
          "type": "string",
          "title": "web, mobile, desktop, tablet"
        },
        "lat": {
          "type": "number",
          "format": "double"
        },
        "long": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "v1SignInRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "Can be username, email, or phone - determined by backend"
        },
        "password": {
          "type": "string"
        },
        "otp": {
          "type": "string",
          "title": "One-time password for 2FA"
        },
        "rememberMe": {
          "type": "boolean",
          "title": "Extend session duration"
        },
        "metadata": {
          "$ref": "#/definitions/v1SignInMetadata",
          "title": "Optional device metadata"
        }
      },
      "title": "SignInRequest for user authentication"
    },
    "v1SignInResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Access token expiration (Unix timestamp)"
        },
        "refreshExpiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Refresh token expiration (Unix timestamp)"
        },
        "user": {
          "$ref": "#/definitions/v1User"
        },
        "sessionId": {
          "type": "string",
          "title": "Session UUID for tracking"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "SignInResponse with authentication tokens and user data"
    },
    "v1SignUpRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "Display name for the user"
        }
      },
      "title": "SignUpRequest for user registration - only authentication credentials"
    },
    "v1SignUpResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        },
        "message": {
          "type": "string"
        },
        "emailVerificationRequired": {
          "type": "boolean"
        },
        "phoneVerificationRequired": {
          "type": "boolean"
        }
      },
      "title": "SignUpResponse after successful registration - only user data"
    },
    "v1SortOrder": {
      "type": "string",
      "enum": [
        "NONE",
        "ASC",
        "DESC"
      ],
      "default": "NONE"
    },
    "v1TerminateSessionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "TerminateSessionResponse"
    },
    "v1UpdateGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "UpdateGroupResponse"
    },
    "v1UpdateProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/v1UserProfile"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "UpdateProfileResponse"
    },
    "v1UpdateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        }
      },
      "title": "UpdateUserResponse"
    },
    "v1User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "uuid": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "Display name for the user"
        },
        "avatarUrl": {
          "type": "string",
          "title": "URL to user's avatar image"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "phoneVerified": {
          "type": "boolean"
        },
        "deactivated": {
          "type": "boolean"
        },
        "isActive": {
          "type": "boolean"
        },
        "isLocked": {
          "type": "boolean"
        },
        "failedLoginAttempts": {
          "type": "integer",
          "format": "int32"
        },
        "lastLoginAt": {
          "type": "string",
          "format": "int64"
        },
        "passwordChangedAt": {
          "type": "string",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "int64"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "User represents a user account in the system"
    },
    "v1UserGroup": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string",
          "format": "int64"
        },
        "groupName": {
          "type": "string"
        },
        "groupDisplayName": {
          "type": "string"
        },
        "groupDescription": {
          "type": "string"
        },
        "isSystem": {
          "type": "boolean"
        },
        "isDefault": {
          "type": "boolean"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "assignedAt": {
          "type": "string",
          "format": "int64"
        },
        "assignedBy": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "UserGroup represents a group membership for a user"
    },
    "v1UserProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "uuid": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "format": "int64"
        },
        "profileName": {
          "type": "string",
          "title": "Name/label for this profile"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp"
        },
        "gender": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "websiteUrl": {
          "type": "string"
        },
        "metadata": {
          "type": "string",
          "format": "byte",
          "title": "JSON metadata"
        },
        "createdAt": {
          "type": "string",
          "format": "int64"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "UserProfile represents extended user profile information"
    },
    "v1ValidateTokenRequest": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        }
      },
      "title": "ValidateTokenRequest to check token validity"
    },
    "v1ValidateTokenResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/v1User",
          "title": "User info if token is valid"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Token expiration"
        }
      },
      "title": "ValidateTokenResponse"
    },
    "v1VerificationResponse": {
      "type": "object",
      "properties": {
        "verified": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "VerificationResponse for verification operations"
    },
    "v1VerifyEmailRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "verificationCode": {
          "type": "string"
        }
      },
      "title": "VerifyEmailRequest for email verification"
    },
    "v1VerifyPhoneRequest": {
      "type": "object",
      "properties": {
        "phone": {
          "type": "string"
        },
        "verificationCode": {
          "type": "string"
        }
      },
      "title": "VerifyPhoneRequest for phone verification"
    }
  }
}
