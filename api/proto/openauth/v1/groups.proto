syntax = "proto3";
package v1;

import "validate/validate.proto";

option go_package = "./openauth_v1";

// Group represents a group/role in the system for organizing users and permissions
message Group {
    // Unique identifier for the group
    int64 id = 1;
    
    // Unique name for the group
    string name = 2;
    
    // Human-readable display name for the group
    string display_name = 3;

    // Optional detailed description of the group
    optional string description = 4;

    int64 created_by = 5;

    // Timestamp when the group was created
    int64 created_at = 6;

    // Timestamp when the group was last updated
    int64 updated_at = 7;

    // Whether this is a system group (cannot be modified/deleted)
    bool is_system = 8;
}

// CreateGroupRequest to create a new group
message CreateGroupRequest {
    // Unique name for the group
    string name = 1 [(validate.rules).string = {
        min_len: 3,
        max_len: 100,
    }];
    
    // Human-readable display name for the group
    string display_name = 2 [(validate.rules).string = {
        min_len: 3,
        max_len: 100
    }];
    
    // Optional detailed description of the group
    optional string description = 3 [(validate.rules).string.max_len = 1000];
    bool is_default = 4;
}

// CreateGroupResponse after successful group creation
message CreateGroupResponse {
    Group group = 1;
    string message = 2;
}

// GetGroupRequest to get group by ID
message GetGroupRequest {
    int64 id = 1 [(validate.rules).int64.gt = 0];
}

// GetGroupResponse
message GetGroupResponse {
    Group group = 1;
}

// UpdateGroupRequest to update group information
message UpdateGroupRequest {
    int64 id = 1 [(validate.rules).int64.gt = 0];

    // Optional new name for the group
    optional string name = 4 [(validate.rules).string = {
        min_len: 3,
        max_len: 100,
    }];
    
    // Optional new display name
    optional string display_name = 5 [(validate.rules).string = {
        min_len: 3,
        max_len: 100
    }];
    
    // Optional new description
    optional string description = 6 [(validate.rules).string.max_len = 1000];
}

// UpdateGroupResponse
message UpdateGroupResponse {
    Group group = 1;
    string message = 2;
}

// DeleteGroupRequest to delete a group
message DeleteGroupRequest {
    int64 id = 1 [(validate.rules).int64.gt = 0];
}

// DeleteGroupResponse
message DeleteGroupResponse {
    bool success = 1;
    string message = 2;
}

// ListGroupsRequest for listing groups with pagination and filtering
message ListGroupsRequest {
    // Maximum number of groups to return (default: 10, max: 100)
    int32 limit = 1 [(validate.rules).int32 = {gte: 1, lte: 100}];
    
    // Number of groups to skip (for pagination)
    int32 offset = 2 [(validate.rules).int32.gte = 0];

    optional int64 id = 3 [(validate.rules).int64.gt = 0];

    // Optional search query (searches name, display_name)
    optional string search = 4 [(validate.rules).string.max_len = 255];

    bool all = 5;
}

// ListGroupsResponse
message ListGroupsResponse {
    repeated Group groups = 1;
}

// AssignUsersToGroupRequest to add users to a group
message AssignUsersToGroupRequest {
    repeated int64 user_ids = 1 [(validate.rules).repeated = {
        min_items: 1,
        max_items: 100,
        items: {int64: {gt: 0}}
    }];
    int64 group_id = 2 [(validate.rules).int64.gt = 0];
    // Optional expiration time for the group membership
    optional int64 expires_at = 3 [(validate.rules).int64.gte = 0];
}

// AssignUsersToGroupResponse
message AssignUsersToGroupResponse {
    bool success = 1;
    string message = 2;
}

// RemoveUsersFromGroupRequest to remove users from a group
message RemoveUsersFromGroupRequest {
    repeated int64 user_ids = 1 [(validate.rules).repeated = {
        min_items: 1,
        max_items: 100,
        items: {int64: {gt: 0}}
    }];
    int64 group_id = 2 [(validate.rules).int64.gt = 0];
}

// RemoveUsersFromGroupResponse
message RemoveUsersFromGroupResponse {
    bool success = 1;
    string message = 2;
}

// ListGroupUsersRequest to get all users in a group
message ListGroupUsersRequest {
    int64 group_id = 1 [(validate.rules).int64.gt = 0];
    // Pagination
    int32 limit = 3 [(validate.rules).int32 = {gte: 1, lte: 100}];
    int32 offset = 4 [(validate.rules).int32.gte = 0];
    bool all = 5;
}

// ListGroupUsersResponse
message ListGroupUsersResponse {
    repeated GroupUser users = 1;
}

// GroupUser represents a user's membership in a group
message GroupUser {
    int64 user_id = 1;
    string user_uuid = 2;
    string username = 3;
    optional string email = 4;
    optional string name = 5;
    optional string avatar = 6;
    optional int64 expires_at = 7;
    int64 assigned_at = 8;
    int64 assigned_by = 9;
}

// ListUserGroupsRequest to get all groups for a user
message ListUserGroupsRequest {
    int64 user_id = 1 [(validate.rules).int64.gt = 0];
    int32 limit = 2 [(validate.rules).int32 = {gte: 1, lte: 100}];
    int32 offset = 3 [(validate.rules).int32.gte = 0];
    bool all = 4;
}

// ListUserGroupsResponse
message ListUserGroupsResponse {
    repeated UserGroup groups = 1;
}

// UserGroup represents a group membership for a user
message UserGroup {
    int64 group_id = 1;
    string group_name = 2;
    string group_display_name = 3;
    optional string group_description = 4;
    bool is_system = 5;
    bool is_default = 6;
    optional int64 expires_at = 7;
    int64 assigned_at = 8;
    int64 assigned_by = 9;
}
