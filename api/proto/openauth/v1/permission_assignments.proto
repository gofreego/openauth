syntax = "proto3";
package v1;

import "proto/openauth/v1/permissions.proto";
import "validate/validate.proto";

option go_package = "./openauth_v1";

// Request to assign a permission to a group
message AssignPermissionsToGroupRequest {
    // ID of the group to assign the permission to
    int64 group_id = 1 [(validate.rules).int64.gt = 0];

    // IDs of the permissions to assign
    repeated int64 permissions_ids = 2 [(validate.rules).repeated = {
        min_items: 1,
        max_items: 100,
        items: {int64: {gt: 0}}
    }];
}

// Response after assigning a permission to a group
message AssignPermissionsToGroupResponse {
    string message = 2;
}

// Request to remove a permission from a group
message RemovePermissionsFromGroupRequest {
    // ID of the group to remove the permission from
    int64 group_id = 1 [(validate.rules).int64.gt = 0];

    // IDs of the permissions to remove
    repeated int64 permissions_ids = 2 [(validate.rules).repeated = {
        min_items: 1,
        max_items: 100,
        items: {int64: {gt: 0}}
    }];
}

// Response after removing a permission from a group
message RemovePermissionsFromGroupResponse {
    bool success = 1;
    string message = 2;
}

// Request to list permissions assigned to a group
message ListGroupPermissionsRequest {
    // ID of the group to list permissions for
    int64 group_id = 1 [(validate.rules).int64.gt = 0];
}

// Response containing group permissions
message ListGroupPermissionsResponse {
    // Array of permissions assigned to the group
    repeated EffectivePermission permissions = 1;
}

// Request to assign a permission directly to a user
message AssignPermissionsToUserRequest {
    // ID of the user to assign the permission to
    int64 user_id = 1 [(validate.rules).int64.gt = 0];

    // IDs of the permissions to assign
    repeated int64 permissions_ids = 2 [(validate.rules).repeated = {
        min_items: 1,
        max_items: 100,
        items: {int64: {gt: 0}}
    }];
    
    // Optional expiration timestamp (null means no expiration)
    optional int64 expires_at = 3 [(validate.rules).int64.gte = 0];
}

// Response after assigning a permission to a user
message AssignPermissionsToUserResponse {
    string message = 2;
}

// Request to remove a permission from a user
message RemovePermissionsFromUserRequest {
    // ID of the user to remove the permission from
    int64 user_id = 1 [(validate.rules).int64.gt = 0];

    // IDs of the permissions to remove
    repeated int64 permissions_ids = 2 [(validate.rules).repeated = {
        min_items: 1,
        max_items: 100,
        items: {int64: {gt: 0}}
    }];
}

// Response after removing a permission from a user
message RemovePermissionsFromUserResponse {
    bool success = 1;
    string message = 2;
}

// Request to list permissions assigned directly to a user
message ListUserPermissionsRequest {
    // ID of the user to list permissions for
    int64 user_id = 1 [(validate.rules).int64.gt = 0];
}

// Response containing user permissions
message ListUserPermissionsResponse {
    // Array of permissions assigned to the user
    repeated EffectivePermission permissions = 1;
}

// Request to get all effective permissions for a user (direct + group permissions)
message GetUserEffectivePermissionsRequest {
    // ID of the user to get effective permissions for
    int64 user_id = 1 [(validate.rules).int64.gt = 0];
}

// EffectivePermission represents a permission that a user has either directly or through group membership
message EffectivePermission {
    // Permission details
    int64 permission_id = 1;
    string permission_name = 2;
    string permission_display_name = 3;
    optional string permission_description = 4;
    
    // Source of the permission: "direct" or "group"
    string source = 5;
    
    // If source is "group", this contains the group details
    optional int64 group_id = 6;
    optional string group_name = 7;
    optional string group_display_name = 8;
    
    // If source is "direct", this may contain expiration info
    optional int64 expires_at = 9;
    
    // When this permission was granted
    int64 granted_at = 10;
    
    // Who granted this permission
    int64 granted_by = 11;
}

// Response containing effective permissions for a user
message GetUserEffectivePermissionsResponse {
    // Array of effective permissions for the user
    repeated EffectivePermission permissions = 1;
}
