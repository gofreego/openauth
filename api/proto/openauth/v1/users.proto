syntax = "proto3";
package v1;

import "proto/common/sort.proto";
import "validate/validate.proto";

option go_package = "./openauth_v1";

// User represents a user account in the system
message User {
    int64 id = 1;
    string uuid = 2;
    string username = 3;
    optional string email = 4;
    optional string phone = 5;
    optional string name = 6;  // Display name for the user
    optional string avatar_url = 7;  // URL to user's avatar image
    bool email_verified = 8;
    bool phone_verified = 9;
    bool deactivated = 10;
    bool is_active = 11;
    bool is_locked = 12;
    int32 failed_login_attempts = 13;
    optional int64 last_login_at = 14;
    int64 password_changed_at = 15;
    int64 created_at = 16;
    int64 updated_at = 17;
}

// UserProfile represents extended user profile information
message UserProfile {
    int64 id = 1;
    string uuid = 2;
    int64 user_id = 3;
    optional string profile_name = 4;  // Name/label for this profile
    optional string first_name = 5;
    optional string last_name = 6;
    optional string display_name = 7;
    optional string bio = 8;
    optional string avatar_url = 9;
    optional string date_of_birth = 10;  // yyyy-mm-dd
    optional string gender = 11;
    optional string timezone = 12;
    optional string locale = 13;
    optional string country = 14;
    optional string city = 15;
    optional string address = 16;
    optional string postal_code = 17;
    optional string website_url = 18;
    bytes metadata = 19;  // JSON metadata
    int64 created_at = 20;
    int64 updated_at = 21;
}

// SignUpRequest for user registration - only authentication credentials
message SignUpRequest {
    string username = 1 [(validate.rules).string = {
        min_len: 3,
        max_len: 50,
        pattern: "^[a-zA-Z0-9_.-]+$"
    }];
    optional string email = 2 [(validate.rules).string.email = true];
    optional string phone = 3 [(validate.rules).string = {
        pattern: "^\\+?[1-9]\\d{1,22}$"
    }];
    string password = 4 [(validate.rules).string = {
        min_len: 8,
        max_len: 128
    }];
    optional string name = 5 [(validate.rules).string.max_len = 100];
}

// SignUpResponse after successful registration - only user data
message SignUpResponse {
    User user = 1;
    string message = 2;
    bool email_verification_required = 3;
    bool phone_verification_required = 4;
}

// VerifyEmailRequest for email verification
message VerifyEmailRequest {
    string email = 1 [(validate.rules).string = {
        email: true,
        min_len: 1
    }];
    string verification_code = 2 [(validate.rules).string = {
        min_len: 4,
        max_len: 8,
        pattern: "^[0-9]+$"
    }];
}

// VerifyPhoneRequest for phone verification
message VerifyPhoneRequest {
    string phone = 1 [(validate.rules).string = {
        pattern: "^\\+?[1-9]\\d{1,22}$",
        min_len: 1
    }];
    string verification_code = 2 [(validate.rules).string = {
        min_len: 4,
        max_len: 8,
        pattern: "^[0-9]+$"
    }];
}

// VerificationResponse for verification operations
message VerificationResponse {
    bool verified = 1;
    string message = 2;
}

// SendVerificationCodeRequest to resend verification codes
message SendVerificationCodeRequest {
    string identifier = 1 [(validate.rules).string = {
        min_len: 1,
        max_len: 255
    }];  // email or phone - determined by backend
}

// SendVerificationCodeResponse
message SendVerificationCodeResponse {
    bool sent = 1;
    string message = 2;
    int64 expires_at = 3;  // When the code expires
    int64 resend_after = 4; // When the user can request another code (Unix timestamp milliseconds)
    int64 id = 5;
}

// CheckUsernameRequest to check username availability
message CheckUsernameRequest {
    string username = 1 [(validate.rules).string = {
        min_len: 3,
        max_len: 50,
        pattern: "^[a-zA-Z0-9_.-]+$"
    }];
}

// CheckUsernameResponse
message CheckUsernameResponse {
    bool available = 1;
    string message = 2;
    repeated string suggestions = 3;  // Alternative username suggestions if not available
}

// CheckEmailRequest to check email availability
message CheckEmailRequest {
    string email = 1 [(validate.rules).string = {
        email: true,
        min_len: 1
    }];
}

// CheckEmailResponse
message CheckEmailResponse {
    bool available = 1;
    string message = 2;
}

// Profile Management Messages

// CreateProfileRequest to create a new profile for a user
message CreateProfileRequest {
    int64 user_id = 1 [(validate.rules).int64.gt = 0];  
    optional string profile_name = 2 [(validate.rules).string.max_len = 100];
    optional string first_name = 3 [(validate.rules).string.max_len = 50];
    optional string last_name = 4 [(validate.rules).string.max_len = 50];
    optional string display_name = 5 [(validate.rules).string.max_len = 100];
    optional string bio = 6 [(validate.rules).string.max_len = 500];
    optional string avatar_url = 7 [(validate.rules).string = {
        max_len: 2048,
        uri: true
    }];
    optional string date_of_birth = 8 [(validate.rules).string = {
        pattern: "^(19|20)\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$"
    }];  // yyyy-mm-dd
    optional string gender = 9 [(validate.rules).string.max_len = 50];
    optional string timezone = 10 [(validate.rules).string.max_len = 50];
    optional string locale = 11 [(validate.rules).string.max_len = 20];
    optional string country = 12 [(validate.rules).string.max_len = 2];
    optional string city = 13 [(validate.rules).string.max_len = 100];
    optional string address = 14 [(validate.rules).string.max_len = 500];
    optional string postal_code = 15 [(validate.rules).string.max_len = 25];
    optional string website_url = 16 [(validate.rules).string = {
        max_len: 2048,
        uri: true
    }];
    bytes metadata = 17 [(validate.rules).bytes.max_len = 10240];
}

// CreateProfileResponse
message CreateProfileResponse {
    UserProfile profile = 1;
    string message = 2;
}

// ListUserProfilesRequest to get all profiles for a user
message ListUserProfilesRequest {
    string user_uuid = 1 [(validate.rules).string = {
        min_len: 1,
        max_len: 36
    }];
    int32 limit = 2;
    int32 offset = 3;
}

// ListUserProfilesResponse
message ListUserProfilesResponse {
    repeated UserProfile profiles = 1;
}

// UpdateProfileRequest to update a specific profile
message UpdateProfileRequest {
    string profile_uuid = 1 [(validate.rules).string = {
        min_len: 1,
        max_len: 36
    }];
    optional string profile_name = 2 [(validate.rules).string.max_len = 100];
    optional string first_name = 3 [(validate.rules).string.max_len = 50];
    optional string last_name = 4 [(validate.rules).string.max_len = 50];
    optional string display_name = 5 [(validate.rules).string.max_len = 100];
    optional string bio = 6 [(validate.rules).string.max_len = 500];
    optional string avatar_url = 7 [(validate.rules).string = {
        max_len: 2048,
        uri: true
    }];
    optional string date_of_birth = 8 [(validate.rules).string = {
        pattern: "^(19|20)\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$"
    }];  // yyyy-mm-dd
    optional string gender = 9 [(validate.rules).string.max_len = 50];
    optional string timezone = 10 [(validate.rules).string.max_len = 50];
    optional string locale = 11 [(validate.rules).string.max_len = 20];
    optional string country = 12 [(validate.rules).string.max_len = 2];
    optional string city = 13 [(validate.rules).string.max_len = 100];
    optional string address = 14 [(validate.rules).string.max_len = 500];
    optional string postal_code = 15 [(validate.rules).string.max_len = 25];
    optional string website_url = 16 [(validate.rules).string = {
        max_len: 2048,
        uri: true
    }];
    bytes metadata = 17 [(validate.rules).bytes.max_len = 10240];
}

// UpdateProfileResponse
message UpdateProfileResponse {
    UserProfile profile = 1;
    string message = 2;
}

// DeleteProfileRequest to delete a specific profile
message DeleteProfileRequest {
    string profile_uuid = 1 [(validate.rules).string = {
        min_len: 1,
        max_len: 36
    }];
}

// DeleteProfileResponse
message DeleteProfileResponse {
    bool success = 1;
    string message = 2;
}

// GetUserRequest to get user by ID
message GetUserRequest {
    oneof identifier {
        int64 id = 1 [(validate.rules).int64.gt = 0];
        string uuid = 2 [(validate.rules).string = {
            min_len: 1,
            max_len: 36
        }];
    }
    bool include_profile = 3;  // Whether to include profile information
}

// GetUserResponse
message GetUserResponse {
    User user = 1;
    repeated UserProfile profiles = 2;
}

// UpdateUserRequest to update user information
message UpdateUserRequest {
    string uuid = 1 [(validate.rules).string = {
        min_len: 1,
        max_len: 36
    }];
    optional string username = 2 [(validate.rules).string = {
        min_len: 3,
        max_len: 50,
        pattern: "^[a-zA-Z0-9_.-]+$"
    }];
    optional string email = 3 [(validate.rules).string.email = true];
    optional string phone = 4 [(validate.rules).string = {
        pattern: "^\\+?[1-9]\\d{1,14}$"
    }];
    optional bool is_active = 5;
    optional string name = 6 [(validate.rules).string.max_len = 100];
    optional string avatar_url = 7 [(validate.rules).string = {
        max_len: 2048,
        uri: true
    }];
}

// UpdateUserResponse
message UpdateUserResponse {
    User user = 1;
}

// ChangePasswordRequest to change user password
message ChangePasswordRequest {
    string uuid = 1 [(validate.rules).string = {
        min_len: 1,
        max_len: 36
    }];
    string current_password = 2 [(validate.rules).string = {
        min_len: 1,
        max_len: 128
    }];
    string new_password = 3 [(validate.rules).string = {
        min_len: 8,
        max_len: 128
    }];
}

// ChangePasswordResponse
message ChangePasswordResponse {
    bool success = 1;
    string message = 2;
}

// ListUsersRequest for listing users with pagination and filtering
message ListUsersRequest {
    int32 limit = 1;
    int32 offset = 2;
    optional string search = 3 [(validate.rules).string.max_len = 255];
}

// ListUsersResponse
message ListUsersResponse {
    repeated User users = 1;
}

// DeleteUserRequest to delete/deactivate user
message DeleteUserRequest {
    string uuid = 1 [(validate.rules).string = {
        min_len: 1,
        max_len: 36
    }];
    bool soft_delete = 2;  // If true, just deactivate; if false, hard delete
}

// DeleteUserResponse
message DeleteUserResponse {
    bool success = 1;
    string message = 2;
}
