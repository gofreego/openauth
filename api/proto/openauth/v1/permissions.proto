syntax = "proto3";
package v1;

option go_package = "./openauth_v1";

// Permission represents a specific authorization rule in the system.
// It follows a Resource-Based Access Control (RBAC) pattern where permissions
// are defined by combining a resource (what) with an action (how).
//
// Example: A permission with resource="users" and action="create" allows
// creating new user accounts.
message Permission {
    // Unique identifier for the permission
    int64 id = 1;
    
    // Unique name for the permission, typically in format "resource.action"
    // Examples: "users.create", "permissions.delete", "groups.read"
    string name = 2;
    
    // Human-readable display name for the permission
    // Examples: "Create Users", "Delete Permissions", "View Groups"
    string display_name = 3;
    
    // Optional detailed description of what this permission allows
    optional string description = 4;
    
    // The resource this permission applies to (what entity/domain object)
    // Examples: "users", "groups", "permissions", "sessions", "posts", "orders"
    string resource = 5;
    
    // The action that can be performed on the resource
    // Common actions: "create", "read", "update", "delete", "list"
    // Custom actions: "publish", "approve", "archive", "export"
    string action = 6;
    
    // Whether this is a system permission (cannot be modified/deleted)
    // System permissions are critical for application functionality
    bool is_system = 7;
    
    // Unix timestamp when the permission was created
    int64 created_at = 8;
    
    // Unix timestamp when the permission was last updated
    int64 updated_at = 9;
}

// Request to create a new permission
message CreatePermissionRequest {
    // Unique name for the permission, typically in format "resource.action"
    // Must be unique across all permissions
    // Examples: "users.create", "orders.approve", "reports.export"
    string name = 1;
    
    // Human-readable display name
    // Examples: "Create Users", "Approve Orders", "Export Reports"
    string display_name = 2;
    
    // Optional detailed description explaining what this permission allows
    optional string description = 3;
    
    // The resource this permission applies to
    // Should be a noun representing an entity in your system
    // Examples: "users", "groups", "permissions", "posts", "orders"
    string resource = 4;
    
    // The action that can be performed on the resource
    // Should be a verb representing an operation
    // Examples: "create", "read", "update", "delete", "list", "publish", "approve"
    string action = 5;
}

// Request to retrieve a specific permission by ID
message GetPermissionRequest {
    // The unique identifier of the permission to retrieve
    int64 id = 1;
}

// Request to list permissions with optional filtering and pagination
message ListPermissionsRequest {
    // Maximum number of permissions to return (default: 10, max: 100)
    optional int32 limit = 1;
    
    // Number of permissions to skip for pagination (default: 0)
    optional int32 offset = 2;
    
    // Search term to filter permissions by name, display_name, or description
    // Uses case-insensitive partial matching
    optional string search = 3;
    
    // Filter permissions by specific resource
    // Examples: "users", "groups", "permissions"
    optional string resource = 4;
    
    // Filter permissions by specific action
    // Examples: "create", "read", "update", "delete"
    optional string action = 5;
    
    // Filter by system vs user-created permissions
    // true: only system permissions, false: only user-created permissions
    optional bool is_system = 6;
}

// Response containing a list of permissions with pagination metadata
message ListPermissionsResponse {
    // Array of permissions matching the request criteria
    repeated Permission permissions = 1;
    
    // Total number of permissions that match the filter criteria
    // (not just the current page)
    int32 total_count = 2;
    
    // The limit value used for this request
    int32 limit = 3;
    
    // The offset value used for this request
    int32 offset = 4;
    
    // Whether there are more permissions available beyond the current result set
    bool has_more = 5;
}

// Request to update an existing permission
message UpdatePermissionRequest {
    // The unique identifier of the permission to update
    int64 id = 1;
    
    // New name for the permission (optional)
    // Must be unique if provided
    optional string name = 2;
    
    // New display name for the permission (optional)
    optional string display_name = 3;
    
    // New description for the permission (optional)
    // Set to empty string to clear existing description
    optional string description = 4;
    
    // New resource for the permission (optional)
    optional string resource = 5;
    
    // New action for the permission (optional)
    optional string action = 6;
}

// Request to delete a permission
message DeletePermissionRequest {
    // The unique identifier of the permission to delete
    // Note: System permissions cannot be deleted
    int64 id = 1;
}

// Response confirming permission deletion
message DeletePermissionResponse {
    // Whether the deletion was successful
    bool success = 1;
    
    // Human-readable message about the deletion result
    string message = 2;
}
