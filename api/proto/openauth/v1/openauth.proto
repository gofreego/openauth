syntax = "proto3";
package v1;

option go_package = "./openauth_v1";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/common/ping.proto";
import "proto/openauth/v1/permissions.proto";
import "proto/openauth/v1/users.proto";
import "proto/openauth/v1/groups.proto";
import "proto/openauth/v1/sessions.proto";
import "proto/openauth/v1/permission_assignments.proto";
import "proto/openauth/v1/stats.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "OpenAuth API"
    version: "v1.0.0"
    description: "OpenAuth is an open-source authentication and authorization service providing user management, RBAC, and secure access control for applications."
  }
  tags: [
    {
      name: "Ping"
      description: "Health check endpoints"
    },
    {
      name: "Statistics"
      description: "System statistics and metrics"
    },
    {
      name: "Permissions"
      description: "Permission management in RBAC system"
    },
    {
      name: "Groups"
      description: "Group management for organizing users"
    },
    {
      name: "Group Users"
      description: "User-group relationship management"
    },
    {
      name: "Permission Assignments"
      description: "Permission assignment to users and groups"
    },
    {
      name: "User Registration"
      description: "User signup and verification"
    },
    {
      name: "User Management"
      description: "User account management"
    },
    {
      name: "Profile Management"
      description: "User profile management"
    },
    {
      name: "Authentication"
      description: "User authentication and token management"
    },
    {
      name: "Session Management"
      description: "User session management"
    }
  ]
};

service OpenAuth {
    
    // Ping is a simple health check endpoint to verify service availability
    rpc Ping (PingRequest) returns (PingResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/ping"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Ping"
            summary: "Ping the server"
            description: "Check if the server is alive."
        };
    }

    // Stats provides system statistics including user counts, permission counts, etc.
    rpc Stats (StatsRequest) returns (StatsResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/stats"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Statistics"
            summary: "Get system statistics"
            description: "Retrieve system statistics including user counts, permission counts, group counts, and other metrics."
        };
    }

    // Permission Management APIs
    // These endpoints manage permissions in a Resource-Based Access Control (RBAC) system
    // where permissions are defined by combining resources (what) with actions (how).

    // CreatePermission creates a new permission in the system.
    // 
    // Permissions follow the pattern: resource.action (e.g., "users.create")
    // - resource: The entity being accessed (users, groups, permissions, etc.)
    // - action: The operation being performed (create, read, update, delete, etc.)
    // 
    // Example: Creating a permission for user management would have:
    // - name: "users.create"
    // - resource: "users" 
    // - action: "create"
    // - display_name: "Create Users"
    rpc CreatePermission (CreatePermissionRequest) returns (Permission) {
        option (google.api.http) = {
            post: "/openauth/v1/permissions"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Permissions"
            summary: "Create a new permission"
            description: "Create a new permission in the system with resource and action definitions."
        };
    }

    // GetPermission retrieves a specific permission by its unique ID.
    // 
    // Returns the complete permission details including resource, action,
    // system status, and metadata.
    rpc GetPermission (GetPermissionRequest) returns (Permission) {
        option (google.api.http) = {
            get: "/openauth/v1/permissions/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Permissions"
            summary: "Get a permission by ID"
            description: "Retrieve a specific permission by its unique ID."
        };
    }

    // ListPermissions retrieves permissions with optional filtering and pagination.
    // 
    // Supports filtering by:
    // - search: Searches across name, display_name, and description fields
    // - resource: Filter by specific resource type (e.g., "users", "groups")
    // - action: Filter by specific action type (e.g., "create", "read")
    // - is_system: Filter by system vs user-created permissions
    // 
    // Pagination is handled via limit/offset parameters:
    // - limit: Maximum number of results (default: 10, max: 100)
    // - offset: Number of results to skip (default: 0)
    // 
    // Example queries:
    // - GET /openauth/v1/permissions?resource=users - All user-related permissions
    // - GET /openauth/v1/permissions?action=create - All creation permissions
    // - GET /openauth/v1/permissions?search=user&limit=20 - Search for "user" with 20 results
    rpc ListPermissions (ListPermissionsRequest) returns (ListPermissionsResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/permissions"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Permissions"
            summary: "List permissions"
            description: "Retrieve permissions with optional filtering and pagination."
        };
    }

    // UpdatePermission modifies an existing permission.
    // 
    // All fields in the request are optional - only provided fields will be updated.
    // System permissions (is_system=true) cannot be modified to prevent
    // breaking core application functionality.
    // 
    // Note: Changing the name requires ensuring uniqueness across all permissions.
    rpc UpdatePermission (UpdatePermissionRequest) returns (Permission) {
        option (google.api.http) = {
            put: "/openauth/v1/permissions/{id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Permissions"
            summary: "Update a permission"
            description: "Modify an existing permission's details."
        };
    }

    // DeletePermission removes a permission from the system.
    // 
    // System permissions (is_system=true) cannot be deleted as they are
    // critical for application functionality. Attempting to delete a system
    // permission will return a PermissionDenied error.
    // 
    // Warning: Deleting a permission will affect all users and groups
    // that currently have this permission assigned.
    rpc DeletePermission (DeletePermissionRequest) returns (DeletePermissionResponse) {
        option (google.api.http) = {
            delete: "/openauth/v1/permissions/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Permissions"
            summary: "Delete a permission"
            description: "Remove a permission from the system."
        };
    }

    // Group Management APIs
    // These endpoints manage groups (roles) in the system for organizing users and permissions.

    // CreateGroup creates a new group in the system.
    // 
    // Groups are used to organize users and assign permissions collectively.
    // Each group has a unique name and can have multiple users and permissions assigned.
    rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/groups"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Groups"
            summary: "Create a new group"
            description: "Create a new group in the system for organizing users and permissions."
        };
    }

    // GetGroup retrieves a specific group by ID, UUID, or name.
    // 
    // Returns complete group information including metadata and system status.
    rpc GetGroup (GetGroupRequest) returns (GetGroupResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/groups/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Groups"
            summary: "Get a group by ID"
            description: "Retrieve a specific group by ID, UUID, or name."
        };
    }

    // ListGroups retrieves groups with optional filtering and pagination.
    // 
    // Supports filtering by:
    // - search: Searches across name, display_name, and description fields
    // - is_system: Filter by system vs user-created groups
    // - is_default: Filter by default groups for new users
    rpc ListGroups (ListGroupsRequest) returns (ListGroupsResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/groups"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Groups"
            summary: "List groups"
            description: "Retrieve groups with optional filtering and pagination."
        };
    }

    // UpdateGroup modifies an existing group.
    // 
    // All fields in the request are optional - only provided fields will be updated.
    // System groups (is_system=true) cannot be modified to prevent breaking core functionality.
    rpc UpdateGroup (UpdateGroupRequest) returns (UpdateGroupResponse) {
        option (google.api.http) = {
            put: "/openauth/v1/groups/{id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Groups"
            summary: "Update a group"
            description: "Modify an existing group's details."
        };
    }

    // DeleteGroup removes a group from the system.
    // 
    // System groups (is_system=true) cannot be deleted as they are critical for application functionality.
    // Warning: Deleting a group will remove all user assignments and group permissions.
    rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupResponse) {
        option (google.api.http) = {
            delete: "/openauth/v1/groups/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Groups"
            summary: "Delete a group"
            description: "Remove a group from the system."
        };
    }

    // AssignUserToGroup adds a user to a group.
    // 
    // Grants the user all permissions associated with the group.
    // Supports optional expiration time for temporary group membership.
    rpc AssignUsersToGroup (AssignUsersToGroupRequest) returns (AssignUsersToGroupResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/groups/{group_id}/users"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Group Users"
            summary: "Assign user to group"
            description: "Add a user to a group."
        };
    }

    // RemoveUserFromGroup removes a user from a group.
    // 
    // Revokes all group-based permissions from the user.
    // Direct user permissions are not affected.
    rpc RemoveUsersFromGroup (RemoveUsersFromGroupRequest) returns (RemoveUsersFromGroupResponse) {
        option (google.api.http) = {
            put: "/openauth/v1/groups/{group_id}/users"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Group Users"
            summary: "Remove users from group"
            description: "Remove users from a group."
        };
    }

    // ListGroupUsers retrieves all users in a specific group.
    // 
    // Returns paginated list of users with their group membership details.
    rpc ListGroupUsers (ListGroupUsersRequest) returns (ListGroupUsersResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/groups/{group_id}/users"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Group Users"
            summary: "List group users"
            description: "Retrieve all users in a specific group."
        };
    }

    // ListUserGroups retrieves all groups for a specific user.
    // 
    // Returns paginated list of groups the user belongs to.
    rpc ListUserGroups (ListUserGroupsRequest) returns (ListUserGroupsResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/users/{user_id}/groups"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Group Users"
            summary: "List user groups"
            description: "Retrieve all groups for a specific user."
        };
    }

    // Permission Assignment APIs
    // These endpoints manage the assignment of permissions to groups and users.

    // AssignPermissionToGroup assigns a permission to a group.
    // 
    // This allows all users in the group to inherit this permission.
    // The permission will be available to all current and future group members.
    rpc AssignPermissionsToGroup (AssignPermissionsToGroupRequest) returns (AssignPermissionsToGroupResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/groups/{group_id}/permissions"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Permission Assignments"
            summary: "Assign permissions to group"
            description: "Assign permissions to a group."
        };
    }

    // RemovePermissionFromGroup removes a permission from a group.
    // 
    // This will remove the permission from all users who had it through group membership.
    // Users who have the same permission assigned directly will retain it.
    rpc RemovePermissionsFromGroup (RemovePermissionsFromGroupRequest) returns (RemovePermissionsFromGroupResponse) {
        option (google.api.http) = {
            put: "/openauth/v1/groups/{group_id}/permissions"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Permission Assignments"
            summary: "Remove permissions from group"
            description: "Remove permissions from a group."
        };
    }

    // ListGroupPermissions retrieves all permissions assigned to a specific group.
    // 
    // Returns paginated list of permissions with optional search filtering.
    rpc ListGroupPermissions (ListGroupPermissionsRequest) returns (ListGroupPermissionsResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/groups/{group_id}/permissions"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Permission Assignments"
            summary: "List group permissions"
            description: "Retrieve all permissions assigned to a specific group."
        };
    }

    // AssignPermissionToUser assigns a permission directly to a user.
    // 
    // This creates a direct permission assignment that bypasses group membership.
    // Can include an optional expiration time for temporary permissions.
    rpc AssignPermissionsToUser (AssignPermissionsToUserRequest) returns (AssignPermissionsToUserResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/users/{user_id}/permissions"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Permission Assignments"
            summary: "Assign permissions to user"
            description: "Assign permissions directly to a user."
        };
    }

    // RemovePermissionFromUser removes a permission directly assigned to a user.
    // 
    // This only removes direct permission assignments, not permissions inherited from groups.
    rpc RemovePermissionsFromUser (RemovePermissionsFromUserRequest) returns (RemovePermissionsFromUserResponse) {
        option (google.api.http) = {
            put: "/openauth/v1/users/{user_id}/permissions"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Permission Assignments"
            summary: "Remove permissions from user"
            description: "Remove permissions directly assigned to a user."
        };
    }

    // ListUserPermissions retrieves all permissions directly assigned to a user.
    // 
    // This does not include permissions inherited from group membership.
    // Use GetUserEffectivePermissions to get all permissions including group-inherited ones.
    rpc ListUserPermissions (ListUserPermissionsRequest) returns (ListUserPermissionsResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/users/{user_id}/permissions"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Permission Assignments"
            summary: "List user permissions"
            description: "Retrieve all permissions directly assigned to a user."
        };
    }

    // GetUserEffectivePermissions retrieves all effective permissions for a user.
    // 
    // This includes both directly assigned permissions and permissions inherited from group membership.
    // Each permission includes information about its source (direct assignment or group inheritance).
    rpc GetUserEffectivePermissions (GetUserEffectivePermissionsRequest) returns (GetUserEffectivePermissionsResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/users/{user_id}/effective-permissions"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Permission Assignments"
            summary: "Get user effective permissions"
            description: "Retrieve all effective permissions for a user including inherited permissions."
        };
    }

    // User Registration and Management APIs
    // These endpoints handle user account creation, verification, and profile management.

    // SignUp creates a new user account in the system.
    // 
    // Supports multiple registration methods:
    // - Username + password (required)
    // - Email + password (optional, triggers email verification)
    // - Phone + password (optional, triggers SMS verification)
    // 
    // Returns the created user and profile information along with
    // verification requirements if email/phone was provided.
    rpc SignUp (SignUpRequest) returns (SignUpResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/users/signup"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "User Registration"
            summary: "Sign up a new user"
            description: "Create a new user account in the system."
        };
    }

    // VerifyEmail verifies a user's email address using a verification code.
    // 
    // The verification code is typically sent via email during registration
    // or when requesting email verification. Successful verification
    // enables email-based features and login.
    rpc VerifyEmail (VerifyEmailRequest) returns (VerificationResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/users/verify-email"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "User Registration"
            summary: "Verify email address"
            description: "Verify a user's email address using a verification code."
        };
    }

    // VerifyPhone verifies a user's phone number using a verification code.
    // 
    // The verification code is typically sent via SMS during registration
    // or when requesting phone verification. Successful verification
    // enables SMS-based features and login.
    rpc VerifyPhone (VerifyPhoneRequest) returns (VerificationResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/users/verify-phone"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "User Registration"
            summary: "Verify phone number"
            description: "Verify a user's phone number using a verification code."
        };
    }

    // ResendVerification resends verification codes for email or phone.
    // 
    // Useful when users don't receive the initial verification code
    // or when the code has expired. Includes rate limiting to prevent abuse.
    rpc SendVerificationCode (SendVerificationCodeRequest) returns (SendVerificationCodeResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/users/send-verification-code"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "User Registration"
            summary: "Send verification code"
            description: "Send verification codes for email or phone."
        };
    }

    // CheckUsername checks if a username is available for registration.
    // 
    // Returns availability status and suggestions for alternative usernames
    // if the requested username is already taken. Useful for real-time
    // username validation during registration.
    rpc CheckUsername (CheckUsernameRequest) returns (CheckUsernameResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/users/check-username/{username}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "User Registration"
            summary: "Check username availability"
            description: "Check if a username is available for registration."
        };
    }

    // CheckEmail checks if an email address is available for registration.
    // 
    // Returns availability status for the email address. Used to prevent
    // duplicate registrations and provide user feedback during signup.
    rpc CheckEmail (CheckEmailRequest) returns (CheckEmailResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/users/check-email/{email}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "User Registration"
            summary: "Check email availability"
            description: "Check if an email address is available for registration."
        };
    }

    // GetUser retrieves user information by ID, UUID, username, or email.
    // 
    // Supports multiple identifier types and optional profile inclusion.
    // Access control should be enforced based on the requesting user's
    // permissions and relationship to the target user.
    rpc GetUser (GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/users/{uuid}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "User Management"
            summary: "Get user by ID"
            description: "Retrieve user information by ID, UUID, username, or email."
        };
    }

    // UpdateUser modifies user account and profile information.
    // 
    // Supports partial updates - only provided fields are modified.
    // Sensitive operations like email/phone changes may require
    // additional verification steps.
    rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
        option (google.api.http) = {
            put: "/openauth/v1/users/{uuid}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "User Management"
            summary: "Update user information"
            description: "Modify user account and profile information."
        };
    }

    // ChangePassword allows users to change their password.
    // 
    // Requires the current password for verification and the new password.
    // Triggers password change tracking and may invalidate existing sessions.
    rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/users/{uuid}/change-password"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "User Management"
            summary: "Change user password"
            description: "Allow users to change their password."
        };
    }

    // ListUsers retrieves users with filtering, sorting, and pagination.
    // 
    // Supports filtering by:
    // - search: Search across username, email, and name fields
    // - is_active: Filter by account status
    // - email_verified/phone_verified: Filter by verification status
    // 
    // Requires appropriate permissions to access user listings.
    rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/users"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "User Management"
            summary: "List users"
            description: "Retrieve users with filtering, sorting, and pagination."
        };
    }

    // DeleteUser removes or deactivates a user account.
    // 
    // Supports both soft delete (deactivation) and hard delete.
    // Soft delete preserves data while preventing access.
    // Hard delete permanently removes the user and all associated data.
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/openauth/v1/users/{uuid}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "User Management"
            summary: "Delete user account"
            description: "Remove or deactivate a user account."
        };
    }

    // Profile Management APIs
    // These endpoints handle user profile creation and management.
    // Users can have multiple profiles for different contexts (personal, work, etc.).

    // CreateProfile creates a new profile for a user.
    // 
    // Allows users to create multiple profiles for different contexts.
    // Each profile can have different display information, preferences,
    // and metadata while belonging to the same user account.
    rpc CreateProfile (CreateProfileRequest) returns (CreateProfileResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/users/{user_uuid}/profiles"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Profile Management"
            summary: "Create a new profile"
            description: "Create a new profile for a user."
        };
    }

    // ListUserProfiles retrieves all profiles for a specific user.
    // 
    // Returns paginated list of profiles belonging to a user.
    // Useful for profile selection interfaces and management.
    rpc ListUserProfiles (ListUserProfilesRequest) returns (ListUserProfilesResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/users/{user_uuid}/profiles"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Profile Management"
            summary: "List user profiles"
            description: "Retrieve all profiles for a specific user."
        };
    }

    // UpdateProfile modifies an existing profile.
    // 
    // Supports partial updates - only provided fields are modified.
    // Profile updates are independent of user account information.
    rpc UpdateProfile (UpdateProfileRequest) returns (UpdateProfileResponse) {
        option (google.api.http) = {
            put: "/openauth/v1/profiles/{profile_uuid}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Profile Management"
            summary: "Update a profile"
            description: "Modify an existing profile."
        };
    }

    // DeleteProfile removes a specific profile.
    // 
    // Permanently deletes a profile and all associated data.
    // Users must have at least one profile, so deletion of the last
    // profile may be restricted based on business rules.
    rpc DeleteProfile (DeleteProfileRequest) returns (DeleteProfileResponse) {
        option (google.api.http) = {
            delete: "/openauth/v1/profiles/{profile_uuid}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Profile Management"
            summary: "Delete a profile"
            description: "Remove a specific profile."
        };
    }

    // ===== AUTHENTICATION & SESSION MANAGEMENT =====

    // SignIn authenticates a user and creates a new session.
    //
    // Supports multiple login methods:
    // - Username + password
    // - Email + password  
    // - Phone + password
    //
    // Returns access token, refresh token, and user information.
    // Tracks device information and manages session security.
    rpc SignIn (SignInRequest) returns (SignInResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/auth/signin"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Authentication"
            summary: "Sign in user"
            description: "Authenticate a user and create a new session."
        };
    }

    // RefreshToken generates new access token using refresh token.
    //
    // Implements token rotation for enhanced security where each refresh
    // generates a new refresh token and invalidates the old one.
    rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/auth/refresh"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Authentication"
            summary: "Refresh access token"
            description: "Generate new access token using refresh token."
        };
    }

    // Logout terminates user session(s).
    //
    // Can logout from current session or all sessions across devices.
    // Invalidates tokens and cleans up session data.
    rpc Logout (LogoutRequest) returns (LogoutResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/auth/logout"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Authentication"
            summary: "Logout user"
            description: "Terminate user session(s)."
        };
    }

    // ValidateToken checks if an access token is valid and active.
    //
    // Used for authentication middleware and token verification.
    // Returns user information if token is valid.
    rpc ValidateToken (ValidateTokenRequest) returns (ValidateTokenResponse) {
        option (google.api.http) = {
            post: "/openauth/v1/auth/validate"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Authentication"
            summary: "Validate access token"
            description: "Check if an access token is valid and active."
        };
    }

    // ListUserSessions retrieves active sessions for a user.
    //
    // Shows all devices and sessions where the user is logged in.
    // Useful for security management and device tracking.
    rpc ListUserSessions (ListUserSessionsRequest) returns (ListUserSessionsResponse) {
        option (google.api.http) = {
            get: "/openauth/v1/users/{user_uuid}/sessions"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Session Management"
            summary: "List user sessions"
            description: "Retrieve active sessions for a user."
        };
    }

    // TerminateSession ends a specific user session.
    //
    // Allows users to logout from specific devices remotely.
    // Useful for security when a device is lost or compromised.
    // Terminates the specified session.
    // If userId is provided, it keeps the specified session active and terminates other sessions
    rpc TerminateSession (TerminateSessionRequest) returns (TerminateSessionResponse) {
        option (google.api.http) = {
            put: "/openauth/v1/sessions/terminate"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: "Session Management"
            summary: "Terminate user session"
            description: "End a specific user session."
        };
    }
}

